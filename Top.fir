circuit Top :
  module InstructionFetch :
    input clock : Clock
    input reset : Reset
    output io : { flip address : UInt<32>, instruction : UInt<32>, flip stall : UInt<1>, coreInstrReq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip coreInstrResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>}}}

    wire rst : UInt<1> @[InstructionFetch.scala 16:17]
    node _rst_T = asUInt(reset) @[InstructionFetch.scala 17:22]
    rst <= _rst_T @[InstructionFetch.scala 17:7]
    io.coreInstrResp.ready <= UInt<1>("h1") @[InstructionFetch.scala 18:26]
    io.coreInstrReq.bits.activeByteLane <= UInt<4>("hf") @[InstructionFetch.scala 22:39]
    io.coreInstrReq.bits.isWrite <= UInt<1>("h0") @[InstructionFetch.scala 23:32]
    io.coreInstrReq.bits.dataRequest is invalid @[InstructionFetch.scala 24:36]
    node _io_coreInstrReq_bits_addrRequest_T = shr(io.address, 2) @[InstructionFetch.scala 26:50]
    io.coreInstrReq.bits.addrRequest <= _io_coreInstrReq_bits_addrRequest_T @[InstructionFetch.scala 26:36]
    node _io_coreInstrReq_valid_T = or(rst, io.stall) @[InstructionFetch.scala 27:36]
    node _io_coreInstrReq_valid_T_1 = mux(_io_coreInstrReq_valid_T, UInt<1>("h0"), UInt<1>("h1")) @[InstructionFetch.scala 27:31]
    io.coreInstrReq.valid <= _io_coreInstrReq_valid_T_1 @[InstructionFetch.scala 27:25]
    wire _io_instruction_WIRE : UInt<32> @[InstructionFetch.scala 29:24]
    _io_instruction_WIRE is invalid @[InstructionFetch.scala 29:24]
    node _io_instruction_T = mux(io.coreInstrResp.valid, io.coreInstrResp.bits.dataResponse, _io_instruction_WIRE) @[InstructionFetch.scala 29:24]
    io.instruction <= _io_instruction_T @[InstructionFetch.scala 29:18]

  module CSRRegFile :
    input clock : Clock
    input reset : Reset
    output io : { MISA : { flip i_value : UInt<32>}, MHARTID : { flip i_value : UInt<32>}, CSR : { flip i_opr : UInt<2>, o_data : UInt<32>, flip i_data : UInt<32>, flip i_addr : UInt<12>, flip i_w_en : UInt<1>}, FCSR : { nx : UInt<1>, uf : UInt<1>, of : UInt<1>, dz : UInt<1>, nv : UInt<1>, frm : UInt<3>}}

    reg MISA_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSRRegFile.scala 18:38]
    reg MHARTID_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSRRegFile.scala 19:38]
    reg MCAUSE_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSRRegFile.scala 20:38]
    reg MTVEC_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSRRegFile.scala 21:38]
    reg MEPC_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSRRegFile.scala 22:38]
    reg MIE_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSRRegFile.scala 23:38]
    reg MSTATUS_TW_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 26:38]
    reg MSTATUS_MPRV_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 27:38]
    reg MSTATUS_MPP_REG : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[CSRRegFile.scala 28:38]
    reg MSTATUS_MPIE_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 29:38]
    reg MSTATUS_MIE_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 30:38]
    reg FCSR_NX_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 33:38]
    reg FCSR_UF_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 34:38]
    reg FCSR_OF_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 35:38]
    reg FCSR_DZ_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 36:38]
    reg FCSR_NV_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 37:38]
    reg FCSR_FRM_REG : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[CSRRegFile.scala 38:38]
    MISA_REG <= io.MISA.i_value @[CSRRegFile.scala 41:29]
    MHARTID_REG <= io.MHARTID.i_value @[CSRRegFile.scala 42:29]
    io.FCSR.nx <= FCSR_NX_REG @[CSRRegFile.scala 45:29]
    io.FCSR.uf <= FCSR_UF_REG @[CSRRegFile.scala 46:29]
    io.FCSR.of <= FCSR_OF_REG @[CSRRegFile.scala 47:29]
    io.FCSR.dz <= FCSR_DZ_REG @[CSRRegFile.scala 48:29]
    io.FCSR.nv <= FCSR_NV_REG @[CSRRegFile.scala 49:29]
    io.FCSR.frm <= FCSR_FRM_REG @[CSRRegFile.scala 50:29]
    wire w_data : UInt<32> @[CSRRegFile.scala 53:39]
    wire r_data : UInt<32> @[CSRRegFile.scala 54:39]
    node MSTATUS_WIRE_lo_lo = cat(MSTATUS_MIE_REG, UInt<3>("h0")) @[Cat.scala 33:92]
    node MSTATUS_WIRE_lo_hi_hi = cat(UInt<3>("h0"), MSTATUS_MPIE_REG) @[Cat.scala 33:92]
    node MSTATUS_WIRE_lo_hi = cat(MSTATUS_WIRE_lo_hi_hi, UInt<3>("h0")) @[Cat.scala 33:92]
    node MSTATUS_WIRE_lo = cat(MSTATUS_WIRE_lo_hi, MSTATUS_WIRE_lo_lo) @[Cat.scala 33:92]
    node MSTATUS_WIRE_hi_lo_hi = cat(MSTATUS_MPRV_REG, UInt<4>("h0")) @[Cat.scala 33:92]
    node MSTATUS_WIRE_hi_lo = cat(MSTATUS_WIRE_hi_lo_hi, MSTATUS_MPP_REG) @[Cat.scala 33:92]
    node MSTATUS_WIRE_hi_hi_hi = cat(UInt<10>("h0"), MSTATUS_TW_REG) @[Cat.scala 33:92]
    node MSTATUS_WIRE_hi_hi = cat(MSTATUS_WIRE_hi_hi_hi, UInt<3>("h0")) @[Cat.scala 33:92]
    node MSTATUS_WIRE_hi = cat(MSTATUS_WIRE_hi_hi, MSTATUS_WIRE_hi_lo) @[Cat.scala 33:92]
    node _MSTATUS_WIRE_T = cat(MSTATUS_WIRE_hi, MSTATUS_WIRE_lo) @[Cat.scala 33:92]
    wire MSTATUS_WIRE : UInt @[CSRRegFile.scala 55:43]
    MSTATUS_WIRE <= _MSTATUS_WIRE_T @[CSRRegFile.scala 55:43]
    node _MCAUSE_WLRL_WIRE_T = bits(MCAUSE_REG, 30, 0) @[CSRRegFile.scala 56:54]
    wire MCAUSE_WLRL_WIRE : UInt @[CSRRegFile.scala 56:43]
    MCAUSE_WLRL_WIRE <= _MCAUSE_WLRL_WIRE_T @[CSRRegFile.scala 56:43]
    node _MCAUSE_INTERRUPT_WIRE_T = bits(MCAUSE_REG, 31, 31) @[CSRRegFile.scala 57:54]
    wire MCAUSE_INTERRUPT_WIRE : UInt<1> @[CSRRegFile.scala 57:43]
    MCAUSE_INTERRUPT_WIRE <= _MCAUSE_INTERRUPT_WIRE_T @[CSRRegFile.scala 57:43]
    node _MTVEC_MODE_WIRE_T = bits(MTVEC_REG, 1, 0) @[CSRRegFile.scala 58:53]
    wire MTVEC_MODE_WIRE : UInt @[CSRRegFile.scala 58:43]
    MTVEC_MODE_WIRE <= _MTVEC_MODE_WIRE_T @[CSRRegFile.scala 58:43]
    node _MTVEC_BASE_WIRE_T = bits(MTVEC_REG, 31, 2) @[CSRRegFile.scala 59:53]
    wire MTVEC_BASE_WIRE : UInt @[CSRRegFile.scala 59:43]
    MTVEC_BASE_WIRE <= _MTVEC_BASE_WIRE_T @[CSRRegFile.scala 59:43]
    node FFLAGS_WIRE_lo_hi = cat(FCSR_OF_REG, FCSR_UF_REG) @[Cat.scala 33:92]
    node FFLAGS_WIRE_lo = cat(FFLAGS_WIRE_lo_hi, FCSR_NX_REG) @[Cat.scala 33:92]
    node FFLAGS_WIRE_hi_hi = cat(UInt<27>("h0"), FCSR_NV_REG) @[Cat.scala 33:92]
    node FFLAGS_WIRE_hi = cat(FFLAGS_WIRE_hi_hi, FCSR_DZ_REG) @[Cat.scala 33:92]
    node _FFLAGS_WIRE_T = cat(FFLAGS_WIRE_hi, FFLAGS_WIRE_lo) @[Cat.scala 33:92]
    wire FFLAGS_WIRE : UInt @[CSRRegFile.scala 60:43]
    FFLAGS_WIRE <= _FFLAGS_WIRE_T @[CSRRegFile.scala 60:43]
    node _FRM_WIRE_T = cat(UInt<29>("h0"), FCSR_FRM_REG) @[Cat.scala 33:92]
    wire FRM_WIRE : UInt @[CSRRegFile.scala 61:43]
    FRM_WIRE <= _FRM_WIRE_T @[CSRRegFile.scala 61:43]
    node FCSR_WIRE_lo_hi = cat(FCSR_OF_REG, FCSR_UF_REG) @[Cat.scala 33:92]
    node FCSR_WIRE_lo = cat(FCSR_WIRE_lo_hi, FCSR_NX_REG) @[Cat.scala 33:92]
    node FCSR_WIRE_hi_lo = cat(FCSR_NV_REG, FCSR_DZ_REG) @[Cat.scala 33:92]
    node FCSR_WIRE_hi_hi = cat(UInt<24>("h0"), FCSR_FRM_REG) @[Cat.scala 33:92]
    node FCSR_WIRE_hi = cat(FCSR_WIRE_hi_hi, FCSR_WIRE_hi_lo) @[Cat.scala 33:92]
    node _FCSR_WIRE_T = cat(FCSR_WIRE_hi, FCSR_WIRE_lo) @[Cat.scala 33:92]
    wire FCSR_WIRE : UInt @[CSRRegFile.scala 62:43]
    FCSR_WIRE <= _FCSR_WIRE_T @[CSRRegFile.scala 62:43]
    wire READ : UInt<2> @[CSRRegFile.scala 68:36]
    wire WRITE : UInt<2> @[CSRRegFile.scala 68:36]
    wire SET : UInt<2> @[CSRRegFile.scala 68:36]
    wire CLEAR : UInt<2> @[CSRRegFile.scala 68:36]
    READ <= UInt<2>("h0") @[CSRRegFile.scala 69:111]
    WRITE <= UInt<2>("h1") @[CSRRegFile.scala 69:111]
    SET <= UInt<2>("h2") @[CSRRegFile.scala 69:111]
    CLEAR <= UInt<2>("h3") @[CSRRegFile.scala 69:111]
    node _r_data_T = eq(UInt<10>("h301"), io.CSR.i_addr) @[Mux.scala 81:61]
    wire _r_data_WIRE : UInt<32> @[Mux.scala 81:58]
    _r_data_WIRE is invalid @[Mux.scala 81:58]
    node _r_data_T_1 = mux(_r_data_T, MISA_REG, _r_data_WIRE) @[Mux.scala 81:58]
    node _r_data_T_2 = eq(UInt<12>("hf14"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_3 = mux(_r_data_T_2, MHARTID_REG, _r_data_T_1) @[Mux.scala 81:58]
    node _r_data_T_4 = eq(UInt<10>("h300"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_5 = mux(_r_data_T_4, MSTATUS_WIRE, _r_data_T_3) @[Mux.scala 81:58]
    node _r_data_T_6 = eq(UInt<10>("h342"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_7 = mux(_r_data_T_6, MCAUSE_REG, _r_data_T_5) @[Mux.scala 81:58]
    node _r_data_T_8 = eq(UInt<10>("h305"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_9 = mux(_r_data_T_8, MTVEC_REG, _r_data_T_7) @[Mux.scala 81:58]
    node _r_data_T_10 = eq(UInt<10>("h341"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_11 = mux(_r_data_T_10, MEPC_REG, _r_data_T_9) @[Mux.scala 81:58]
    node _r_data_T_12 = eq(UInt<10>("h304"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_13 = mux(_r_data_T_12, MIE_REG, _r_data_T_11) @[Mux.scala 81:58]
    node _r_data_T_14 = eq(UInt<1>("h1"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_15 = mux(_r_data_T_14, FFLAGS_WIRE, _r_data_T_13) @[Mux.scala 81:58]
    node _r_data_T_16 = eq(UInt<2>("h2"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_17 = mux(_r_data_T_16, FRM_WIRE, _r_data_T_15) @[Mux.scala 81:58]
    node _r_data_T_18 = eq(UInt<2>("h3"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_19 = mux(_r_data_T_18, FCSR_WIRE, _r_data_T_17) @[Mux.scala 81:58]
    r_data <= _r_data_T_19 @[CSRRegFile.scala 84:12]
    io.CSR.o_data <= r_data @[CSRRegFile.scala 86:19]
    node set_data = or(r_data, io.CSR.i_data) @[CSRRegFile.scala 90:29]
    node _clear_data_T = not(io.CSR.i_data) @[CSRRegFile.scala 91:31]
    node clear_data = and(r_data, _clear_data_T) @[CSRRegFile.scala 91:29]
    node _w_data_T = eq(WRITE, io.CSR.i_opr) @[Mux.scala 81:61]
    wire _w_data_WIRE : UInt<32> @[Mux.scala 81:58]
    _w_data_WIRE is invalid @[Mux.scala 81:58]
    node _w_data_T_1 = mux(_w_data_T, io.CSR.i_data, _w_data_WIRE) @[Mux.scala 81:58]
    node _w_data_T_2 = eq(SET, io.CSR.i_opr) @[Mux.scala 81:61]
    node _w_data_T_3 = mux(_w_data_T_2, set_data, _w_data_T_1) @[Mux.scala 81:58]
    node _w_data_T_4 = eq(CLEAR, io.CSR.i_opr) @[Mux.scala 81:61]
    node _w_data_T_5 = mux(_w_data_T_4, clear_data, _w_data_T_3) @[Mux.scala 81:58]
    w_data <= _w_data_T_5 @[CSRRegFile.scala 94:12]
    when io.CSR.i_w_en : @[CSRRegFile.scala 101:24]
      node _T = eq(UInt<10>("h300"), io.CSR.i_addr) @[CSRRegFile.scala 102:30]
      when _T : @[CSRRegFile.scala 102:30]
        node _MSTATUS_TW_REG_T = bits(w_data, 21, 21) @[CSRRegFile.scala 104:43]
        MSTATUS_TW_REG <= _MSTATUS_TW_REG_T @[CSRRegFile.scala 104:34]
        node _MSTATUS_MPRV_REG_T = bits(w_data, 17, 17) @[CSRRegFile.scala 105:43]
        MSTATUS_MPRV_REG <= _MSTATUS_MPRV_REG_T @[CSRRegFile.scala 105:34]
        node _MSTATUS_MPP_REG_T = bits(w_data, 12, 11) @[CSRRegFile.scala 106:43]
        MSTATUS_MPP_REG <= _MSTATUS_MPP_REG_T @[CSRRegFile.scala 106:34]
        node _MSTATUS_MPIE_REG_T = bits(w_data, 7, 7) @[CSRRegFile.scala 107:43]
        MSTATUS_MPIE_REG <= _MSTATUS_MPIE_REG_T @[CSRRegFile.scala 107:34]
        node _MSTATUS_MIE_REG_T = bits(w_data, 3, 3) @[CSRRegFile.scala 108:43]
        MSTATUS_MIE_REG <= _MSTATUS_MIE_REG_T @[CSRRegFile.scala 108:34]
      else :
        node _T_1 = eq(UInt<10>("h342"), io.CSR.i_addr) @[CSRRegFile.scala 102:30]
        when _T_1 : @[CSRRegFile.scala 102:30]
          MCAUSE_REG <= w_data @[CSRRegFile.scala 111:34]
        else :
          node _T_2 = eq(UInt<10>("h305"), io.CSR.i_addr) @[CSRRegFile.scala 102:30]
          when _T_2 : @[CSRRegFile.scala 102:30]
            MTVEC_REG <= w_data @[CSRRegFile.scala 114:34]
          else :
            node _T_3 = eq(UInt<10>("h341"), io.CSR.i_addr) @[CSRRegFile.scala 102:30]
            when _T_3 : @[CSRRegFile.scala 102:30]
              MEPC_REG <= w_data @[CSRRegFile.scala 117:34]
            else :
              node _T_4 = eq(UInt<10>("h304"), io.CSR.i_addr) @[CSRRegFile.scala 102:30]
              when _T_4 : @[CSRRegFile.scala 102:30]
                MIE_REG <= w_data @[CSRRegFile.scala 120:34]
              else :
                node _T_5 = eq(UInt<2>("h3"), io.CSR.i_addr) @[CSRRegFile.scala 102:30]
                when _T_5 : @[CSRRegFile.scala 102:30]
                  node _FCSR_NX_REG_T = bits(w_data, 0, 0) @[CSRRegFile.scala 123:43]
                  FCSR_NX_REG <= _FCSR_NX_REG_T @[CSRRegFile.scala 123:34]
                  node _FCSR_UF_REG_T = bits(w_data, 1, 1) @[CSRRegFile.scala 124:43]
                  FCSR_UF_REG <= _FCSR_UF_REG_T @[CSRRegFile.scala 124:34]
                  node _FCSR_OF_REG_T = bits(w_data, 2, 2) @[CSRRegFile.scala 125:43]
                  FCSR_OF_REG <= _FCSR_OF_REG_T @[CSRRegFile.scala 125:34]
                  node _FCSR_DZ_REG_T = bits(w_data, 3, 3) @[CSRRegFile.scala 126:43]
                  FCSR_DZ_REG <= _FCSR_DZ_REG_T @[CSRRegFile.scala 126:34]
                  node _FCSR_NV_REG_T = bits(w_data, 4, 4) @[CSRRegFile.scala 127:43]
                  FCSR_NV_REG <= _FCSR_NV_REG_T @[CSRRegFile.scala 127:34]
                  node _FCSR_FRM_REG_T = bits(w_data, 7, 5) @[CSRRegFile.scala 128:43]
                  FCSR_FRM_REG <= _FCSR_FRM_REG_T @[CSRRegFile.scala 128:34]
                else :
                  node _T_6 = eq(UInt<1>("h1"), io.CSR.i_addr) @[CSRRegFile.scala 102:30]
                  when _T_6 : @[CSRRegFile.scala 102:30]
                    node _FCSR_NX_REG_T_1 = bits(w_data, 0, 0) @[CSRRegFile.scala 131:43]
                    FCSR_NX_REG <= _FCSR_NX_REG_T_1 @[CSRRegFile.scala 131:34]
                    node _FCSR_UF_REG_T_1 = bits(w_data, 1, 1) @[CSRRegFile.scala 132:43]
                    FCSR_UF_REG <= _FCSR_UF_REG_T_1 @[CSRRegFile.scala 132:34]
                    node _FCSR_OF_REG_T_1 = bits(w_data, 2, 2) @[CSRRegFile.scala 133:43]
                    FCSR_OF_REG <= _FCSR_OF_REG_T_1 @[CSRRegFile.scala 133:34]
                    node _FCSR_DZ_REG_T_1 = bits(w_data, 3, 3) @[CSRRegFile.scala 134:43]
                    FCSR_DZ_REG <= _FCSR_DZ_REG_T_1 @[CSRRegFile.scala 134:34]
                    node _FCSR_NV_REG_T_1 = bits(w_data, 4, 4) @[CSRRegFile.scala 135:43]
                    FCSR_NV_REG <= _FCSR_NV_REG_T_1 @[CSRRegFile.scala 135:34]
                  else :
                    node _T_7 = eq(UInt<2>("h2"), io.CSR.i_addr) @[CSRRegFile.scala 102:30]
                    when _T_7 : @[CSRRegFile.scala 102:30]
                      node _FCSR_FRM_REG_T_1 = bits(w_data, 2, 0) @[CSRRegFile.scala 138:43]
                      FCSR_FRM_REG <= _FCSR_FRM_REG_T_1 @[CSRRegFile.scala 138:34]


  module CSR :
    input clock : Clock
    input reset : Reset
    output io : { flip i_misa_value : UInt<32>, flip i_mhartid_value : UInt<32>, flip i_data : UInt<32>, flip i_imm : UInt<5>, o_data : UInt<32>, flip i_opr : UInt<3>, flip i_addr : UInt<12>, flip i_w_en : UInt<1>, fcsr_o_data : UInt<32>}

    inst csrRegFile of CSRRegFile @[CSR.scala 20:28]
    csrRegFile.clock <= clock
    csrRegFile.reset <= reset
    node _csrRegFile_io_CSR_i_data_T = bits(io.i_opr, 2, 2) @[CSR.scala 23:52]
    node _csrRegFile_io_CSR_i_data_T_1 = mux(_csrRegFile_io_CSR_i_data_T, io.i_imm, io.i_data) @[CSR.scala 23:43]
    csrRegFile.io.CSR.i_data <= _csrRegFile_io_CSR_i_data_T_1 @[CSR.scala 23:37]
    csrRegFile.io.CSR.i_opr <= io.i_opr @[CSR.scala 24:37]
    csrRegFile.io.MISA.i_value <= io.i_misa_value @[CSR.scala 25:37]
    csrRegFile.io.MHARTID.i_value <= io.i_mhartid_value @[CSR.scala 26:37]
    csrRegFile.io.CSR.i_addr <= io.i_addr @[CSR.scala 27:37]
    csrRegFile.io.CSR.i_w_en <= io.i_w_en @[CSR.scala 28:37]
    io.o_data <= csrRegFile.io.CSR.o_data @[CSR.scala 30:37]
    node io_fcsr_o_data_lo_hi = cat(csrRegFile.io.FCSR.of, csrRegFile.io.FCSR.uf) @[Cat.scala 33:92]
    node io_fcsr_o_data_lo = cat(io_fcsr_o_data_lo_hi, csrRegFile.io.FCSR.nx) @[Cat.scala 33:92]
    node io_fcsr_o_data_hi_lo = cat(csrRegFile.io.FCSR.nv, csrRegFile.io.FCSR.dz) @[Cat.scala 33:92]
    node io_fcsr_o_data_hi_hi = cat(UInt<24>("h0"), csrRegFile.io.FCSR.frm) @[Cat.scala 33:92]
    node io_fcsr_o_data_hi = cat(io_fcsr_o_data_hi_hi, io_fcsr_o_data_hi_lo) @[Cat.scala 33:92]
    node _io_fcsr_o_data_T = cat(io_fcsr_o_data_hi, io_fcsr_o_data_lo) @[Cat.scala 33:92]
    io.fcsr_o_data <= _io_fcsr_o_data_T @[CSR.scala 31:37]

  module CSRController :
    input clock : Clock
    input reset : Reset
    output io : { flip regWrExecute : UInt<1>, flip rdSelExecute : UInt<5>, flip csrWrExecute : UInt<1>, flip regWrMemory : UInt<1>, flip rdSelMemory : UInt<5>, flip csrWrMemory : UInt<1>, flip regWrWriteback : UInt<1>, flip rdSelWriteback : UInt<5>, flip csrWrWriteback : UInt<1>, flip rs1SelDecode : UInt<5>, flip csrInstDecode : UInt<1>, flip csrInstIsImmd : UInt<1>, forwardRS1 : UInt<3>}

    node _hazard_DecEx_T = and(io.regWrExecute, io.csrInstDecode) @[CSRController.scala 33:44]
    node _hazard_DecEx_T_1 = not(io.csrInstIsImmd) @[CSRController.scala 35:28]
    node _hazard_DecEx_T_2 = and(_hazard_DecEx_T, _hazard_DecEx_T_1) @[CSRController.scala 34:45]
    node _hazard_DecEx_T_3 = orr(io.rdSelExecute) @[CSRController.scala 36:44]
    node _hazard_DecEx_T_4 = and(_hazard_DecEx_T_2, _hazard_DecEx_T_3) @[CSRController.scala 35:46]
    node _hazard_DecEx_T_5 = not(io.csrWrExecute) @[CSRController.scala 37:28]
    node _hazard_DecEx_T_6 = and(_hazard_DecEx_T_4, _hazard_DecEx_T_5) @[CSRController.scala 36:48]
    node _hazard_DecEx_T_7 = eq(io.rdSelExecute, io.rs1SelDecode) @[CSRController.scala 38:44]
    node _hazard_DecEx_T_8 = and(_hazard_DecEx_T_6, _hazard_DecEx_T_7) @[CSRController.scala 37:45]
    node hazard_DecEx = mux(_hazard_DecEx_T_8, UInt<1>("h1"), UInt<1>("h0")) @[CSRController.scala 33:27]
    node _hazard_DecMem_T = and(io.regWrMemory, io.csrInstDecode) @[CSRController.scala 42:44]
    node _hazard_DecMem_T_1 = not(io.csrInstIsImmd) @[CSRController.scala 44:28]
    node _hazard_DecMem_T_2 = and(_hazard_DecMem_T, _hazard_DecMem_T_1) @[CSRController.scala 43:45]
    node _hazard_DecMem_T_3 = orr(io.rdSelMemory) @[CSRController.scala 45:43]
    node _hazard_DecMem_T_4 = and(_hazard_DecMem_T_2, _hazard_DecMem_T_3) @[CSRController.scala 44:46]
    node _hazard_DecMem_T_5 = not(io.csrWrMemory) @[CSRController.scala 46:28]
    node _hazard_DecMem_T_6 = and(_hazard_DecMem_T_4, _hazard_DecMem_T_5) @[CSRController.scala 45:47]
    node _hazard_DecMem_T_7 = eq(io.rdSelMemory, io.rs1SelDecode) @[CSRController.scala 47:43]
    node _hazard_DecMem_T_8 = and(_hazard_DecMem_T_6, _hazard_DecMem_T_7) @[CSRController.scala 46:44]
    node _hazard_DecMem_T_9 = not(hazard_DecEx) @[CSRController.scala 48:28]
    node _hazard_DecMem_T_10 = and(_hazard_DecMem_T_8, _hazard_DecMem_T_9) @[CSRController.scala 47:63]
    node hazard_DecMem = mux(_hazard_DecMem_T_10, UInt<1>("h1"), UInt<1>("h0")) @[CSRController.scala 42:28]
    node _hazard_DecWb_T = and(io.regWrWriteback, io.csrInstDecode) @[CSRController.scala 52:46]
    node _hazard_DecWb_T_1 = not(io.csrInstIsImmd) @[CSRController.scala 54:28]
    node _hazard_DecWb_T_2 = and(_hazard_DecWb_T, _hazard_DecWb_T_1) @[CSRController.scala 53:45]
    node _hazard_DecWb_T_3 = orr(io.rdSelWriteback) @[CSRController.scala 55:46]
    node _hazard_DecWb_T_4 = and(_hazard_DecWb_T_2, _hazard_DecWb_T_3) @[CSRController.scala 54:46]
    node _hazard_DecWb_T_5 = not(io.csrWrWriteback) @[CSRController.scala 56:28]
    node _hazard_DecWb_T_6 = and(_hazard_DecWb_T_4, _hazard_DecWb_T_5) @[CSRController.scala 55:50]
    node _hazard_DecWb_T_7 = eq(io.rdSelWriteback, io.rs1SelDecode) @[CSRController.scala 57:46]
    node _hazard_DecWb_T_8 = and(_hazard_DecWb_T_6, _hazard_DecWb_T_7) @[CSRController.scala 56:47]
    node _hazard_DecWb_T_9 = not(hazard_DecEx) @[CSRController.scala 58:28]
    node _hazard_DecWb_T_10 = and(_hazard_DecWb_T_8, _hazard_DecWb_T_9) @[CSRController.scala 57:66]
    node _hazard_DecWb_T_11 = and(_hazard_DecWb_T_10, hazard_DecMem) @[CSRController.scala 58:42]
    node hazard_DecWb = mux(_hazard_DecWb_T_11, UInt<1>("h1"), UInt<1>("h0")) @[CSRController.scala 52:27]
    node _csrHazard_DecEx_T = and(io.regWrExecute, io.csrInstDecode) @[CSRController.scala 63:47]
    node _csrHazard_DecEx_T_1 = not(io.csrInstIsImmd) @[CSRController.scala 65:28]
    node _csrHazard_DecEx_T_2 = and(_csrHazard_DecEx_T, _csrHazard_DecEx_T_1) @[CSRController.scala 64:45]
    node _csrHazard_DecEx_T_3 = orr(io.rdSelExecute) @[CSRController.scala 66:44]
    node _csrHazard_DecEx_T_4 = and(_csrHazard_DecEx_T_2, _csrHazard_DecEx_T_3) @[CSRController.scala 65:46]
    node _csrHazard_DecEx_T_5 = and(_csrHazard_DecEx_T_4, io.csrWrExecute) @[CSRController.scala 66:48]
    node _csrHazard_DecEx_T_6 = eq(io.rdSelExecute, io.rs1SelDecode) @[CSRController.scala 68:44]
    node _csrHazard_DecEx_T_7 = and(_csrHazard_DecEx_T_5, _csrHazard_DecEx_T_6) @[CSRController.scala 67:44]
    node csrHazard_DecEx = mux(_csrHazard_DecEx_T_7, UInt<1>("h1"), UInt<1>("h0")) @[CSRController.scala 63:30]
    node _csrHazard_DecMem_T = and(io.regWrMemory, io.csrInstDecode) @[CSRController.scala 72:47]
    node _csrHazard_DecMem_T_1 = not(io.csrInstIsImmd) @[CSRController.scala 74:28]
    node _csrHazard_DecMem_T_2 = and(_csrHazard_DecMem_T, _csrHazard_DecMem_T_1) @[CSRController.scala 73:45]
    node _csrHazard_DecMem_T_3 = orr(io.rdSelMemory) @[CSRController.scala 75:43]
    node _csrHazard_DecMem_T_4 = and(_csrHazard_DecMem_T_2, _csrHazard_DecMem_T_3) @[CSRController.scala 74:46]
    node _csrHazard_DecMem_T_5 = and(_csrHazard_DecMem_T_4, io.csrWrMemory) @[CSRController.scala 75:47]
    node _csrHazard_DecMem_T_6 = eq(io.rdSelMemory, io.rs1SelDecode) @[CSRController.scala 77:43]
    node _csrHazard_DecMem_T_7 = and(_csrHazard_DecMem_T_5, _csrHazard_DecMem_T_6) @[CSRController.scala 76:43]
    node _csrHazard_DecMem_T_8 = not(csrHazard_DecEx) @[CSRController.scala 78:28]
    node _csrHazard_DecMem_T_9 = and(_csrHazard_DecMem_T_7, _csrHazard_DecMem_T_8) @[CSRController.scala 77:63]
    node csrHazard_DecMem = mux(_csrHazard_DecMem_T_9, UInt<1>("h1"), UInt<1>("h0")) @[CSRController.scala 72:31]
    node _csrHazard_DecWb_T = and(io.regWrWriteback, io.csrInstDecode) @[CSRController.scala 82:49]
    node _csrHazard_DecWb_T_1 = not(io.csrInstIsImmd) @[CSRController.scala 84:28]
    node _csrHazard_DecWb_T_2 = and(_csrHazard_DecWb_T, _csrHazard_DecWb_T_1) @[CSRController.scala 83:45]
    node _csrHazard_DecWb_T_3 = orr(io.rdSelWriteback) @[CSRController.scala 85:46]
    node _csrHazard_DecWb_T_4 = and(_csrHazard_DecWb_T_2, _csrHazard_DecWb_T_3) @[CSRController.scala 84:46]
    node _csrHazard_DecWb_T_5 = and(_csrHazard_DecWb_T_4, io.csrWrWriteback) @[CSRController.scala 85:50]
    node _csrHazard_DecWb_T_6 = eq(io.rdSelWriteback, io.rs1SelDecode) @[CSRController.scala 87:46]
    node _csrHazard_DecWb_T_7 = and(_csrHazard_DecWb_T_5, _csrHazard_DecWb_T_6) @[CSRController.scala 86:46]
    node _csrHazard_DecWb_T_8 = not(csrHazard_DecEx) @[CSRController.scala 88:28]
    node _csrHazard_DecWb_T_9 = and(_csrHazard_DecWb_T_7, _csrHazard_DecWb_T_8) @[CSRController.scala 87:66]
    node _csrHazard_DecWb_T_10 = and(_csrHazard_DecWb_T_9, csrHazard_DecMem) @[CSRController.scala 88:45]
    node csrHazard_DecWb = mux(_csrHazard_DecWb_T_10, UInt<1>("h1"), UInt<1>("h0")) @[CSRController.scala 82:30]
    node _io_forwardRS1_T = eq(hazard_DecEx, UInt<1>("h1")) @[Mux.scala 81:61]
    wire _io_forwardRS1_WIRE : UInt<1> @[Mux.scala 81:58]
    _io_forwardRS1_WIRE is invalid @[Mux.scala 81:58]
    node _io_forwardRS1_T_1 = mux(_io_forwardRS1_T, UInt<1>("h1"), _io_forwardRS1_WIRE) @[Mux.scala 81:58]
    node _io_forwardRS1_T_2 = eq(hazard_DecMem, UInt<1>("h1")) @[Mux.scala 81:61]
    node _io_forwardRS1_T_3 = mux(_io_forwardRS1_T_2, UInt<2>("h2"), _io_forwardRS1_T_1) @[Mux.scala 81:58]
    node _io_forwardRS1_T_4 = eq(hazard_DecWb, UInt<1>("h1")) @[Mux.scala 81:61]
    node _io_forwardRS1_T_5 = mux(_io_forwardRS1_T_4, UInt<2>("h3"), _io_forwardRS1_T_3) @[Mux.scala 81:58]
    node _io_forwardRS1_T_6 = eq(csrHazard_DecEx, UInt<1>("h1")) @[Mux.scala 81:61]
    node _io_forwardRS1_T_7 = mux(_io_forwardRS1_T_6, UInt<3>("h4"), _io_forwardRS1_T_5) @[Mux.scala 81:58]
    node _io_forwardRS1_T_8 = eq(csrHazard_DecMem, UInt<1>("h1")) @[Mux.scala 81:61]
    node _io_forwardRS1_T_9 = mux(_io_forwardRS1_T_8, UInt<3>("h5"), _io_forwardRS1_T_7) @[Mux.scala 81:58]
    node _io_forwardRS1_T_10 = eq(csrHazard_DecWb, UInt<1>("h1")) @[Mux.scala 81:61]
    node _io_forwardRS1_T_11 = mux(_io_forwardRS1_T_10, UInt<3>("h6"), _io_forwardRS1_T_9) @[Mux.scala 81:58]
    io.forwardRS1 <= _io_forwardRS1_T_11 @[CSRController.scala 102:19]

  module HazardUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip id_ex_memRead : UInt<1>, flip ex_mem_memRead : UInt<1>, flip id_ex_branch : UInt<1>, flip id_ex_rd : UInt<5>, flip ex_mem_rd : UInt<5>, flip id_rs1 : UInt<5>, flip id_rs2 : UInt<5>, flip dmem_resp_valid : UInt<1>, flip taken : UInt<1>, flip jump : UInt<2>, flip branch : UInt<1>, if_reg_write : UInt<1>, pc_write : UInt<1>, ctl_mux : UInt<1>, ifid_flush : UInt<1>, take_branch : UInt<1>}

    io.ctl_mux <= UInt<1>("h1") @[HazardUnit.scala 26:14]
    io.pc_write <= UInt<1>("h1") @[HazardUnit.scala 27:15]
    io.if_reg_write <= UInt<1>("h1") @[HazardUnit.scala 28:19]
    io.take_branch <= UInt<1>("h1") @[HazardUnit.scala 29:18]
    io.ifid_flush <= UInt<1>("h0") @[HazardUnit.scala 30:17]
    node _T = or(io.id_ex_memRead, io.branch) @[HazardUnit.scala 34:23]
    node _T_1 = eq(io.id_ex_rd, io.id_rs1) @[HazardUnit.scala 35:20]
    node _T_2 = eq(io.id_ex_rd, io.id_rs2) @[HazardUnit.scala 35:49]
    node _T_3 = or(_T_1, _T_2) @[HazardUnit.scala 35:34]
    node _T_4 = and(_T, _T_3) @[HazardUnit.scala 34:37]
    node _T_5 = neq(io.id_ex_rd, UInt<1>("h0")) @[HazardUnit.scala 36:21]
    node _T_6 = neq(io.id_rs1, UInt<1>("h0")) @[HazardUnit.scala 36:42]
    node _T_7 = and(_T_5, _T_6) @[HazardUnit.scala 36:29]
    node _T_8 = neq(io.id_ex_rd, UInt<1>("h0")) @[HazardUnit.scala 37:20]
    node _T_9 = neq(io.id_rs2, UInt<1>("h0")) @[HazardUnit.scala 37:41]
    node _T_10 = and(_T_8, _T_9) @[HazardUnit.scala 37:28]
    node _T_11 = or(_T_7, _T_10) @[HazardUnit.scala 36:51]
    node _T_12 = and(_T_4, _T_11) @[HazardUnit.scala 35:65]
    node _T_13 = eq(io.id_ex_branch, UInt<1>("h0")) @[HazardUnit.scala 38:7]
    node _T_14 = and(_T_12, _T_13) @[HazardUnit.scala 37:51]
    when _T_14 : @[HazardUnit.scala 40:3]
      io.ctl_mux <= UInt<1>("h0") @[HazardUnit.scala 41:16]
      io.pc_write <= UInt<1>("h0") @[HazardUnit.scala 42:17]
      io.if_reg_write <= UInt<1>("h0") @[HazardUnit.scala 43:21]
      io.take_branch <= UInt<1>("h0") @[HazardUnit.scala 44:20]
    node _T_15 = and(io.ex_mem_memRead, io.branch) @[HazardUnit.scala 47:26]
    node _T_16 = eq(io.ex_mem_rd, io.id_rs1) @[HazardUnit.scala 47:56]
    node _T_17 = eq(io.ex_mem_rd, io.id_rs2) @[HazardUnit.scala 47:86]
    node _T_18 = or(_T_16, _T_17) @[HazardUnit.scala 47:70]
    node _T_19 = and(_T_15, _T_18) @[HazardUnit.scala 47:39]
    when _T_19 : @[HazardUnit.scala 47:101]
      io.ctl_mux <= UInt<1>("h0") @[HazardUnit.scala 48:16]
      io.pc_write <= UInt<1>("h0") @[HazardUnit.scala 49:17]
      io.if_reg_write <= UInt<1>("h0") @[HazardUnit.scala 50:21]
      io.take_branch <= UInt<1>("h0") @[HazardUnit.scala 51:20]
    node _T_20 = neq(io.jump, UInt<1>("h0")) @[HazardUnit.scala 55:28]
    node _T_21 = or(io.taken, _T_20) @[HazardUnit.scala 55:17]
    when _T_21 : @[HazardUnit.scala 55:37]
      io.ifid_flush <= UInt<1>("h1") @[HazardUnit.scala 56:19]
    else :
      io.ifid_flush <= UInt<1>("h0") @[HazardUnit.scala 58:19]


  module Control :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<32>, aluSrc : UInt<1>, memToReg : UInt<2>, regWrite : UInt<1>, memRead : UInt<1>, memWrite : UInt<1>, branch : UInt<1>, aluOp : UInt<2>, jump : UInt<2>, aluSrc1 : UInt<2>}

    node _signals_T = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_1 = eq(UInt<6>("h33"), _signals_T) @[Lookup.scala 31:38]
    node _signals_T_2 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_3 = eq(UInt<5>("h13"), _signals_T_2) @[Lookup.scala 31:38]
    node _signals_T_4 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_5 = eq(UInt<7>("h73"), _signals_T_4) @[Lookup.scala 31:38]
    node _signals_T_6 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_7 = eq(UInt<2>("h3"), _signals_T_6) @[Lookup.scala 31:38]
    node _signals_T_8 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_9 = eq(UInt<6>("h23"), _signals_T_8) @[Lookup.scala 31:38]
    node _signals_T_10 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_11 = eq(UInt<7>("h63"), _signals_T_10) @[Lookup.scala 31:38]
    node _signals_T_12 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_13 = eq(UInt<6>("h37"), _signals_T_12) @[Lookup.scala 31:38]
    node _signals_T_14 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_15 = eq(UInt<5>("h17"), _signals_T_14) @[Lookup.scala 31:38]
    node _signals_T_16 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_17 = eq(UInt<7>("h6f"), _signals_T_16) @[Lookup.scala 31:38]
    node _signals_T_18 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_19 = eq(UInt<7>("h67"), _signals_T_18) @[Lookup.scala 31:38]
    node _signals_T_20 = mux(_signals_T_19, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_21 = mux(_signals_T_17, UInt<1>("h0"), _signals_T_20) @[Lookup.scala 34:39]
    node _signals_T_22 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_21) @[Lookup.scala 34:39]
    node _signals_T_23 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_22) @[Lookup.scala 34:39]
    node _signals_T_24 = mux(_signals_T_11, UInt<1>("h1"), _signals_T_23) @[Lookup.scala 34:39]
    node _signals_T_25 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_24) @[Lookup.scala 34:39]
    node _signals_T_26 = mux(_signals_T_7, UInt<1>("h0"), _signals_T_25) @[Lookup.scala 34:39]
    node _signals_T_27 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_26) @[Lookup.scala 34:39]
    node _signals_T_28 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_27) @[Lookup.scala 34:39]
    node signals_0 = mux(_signals_T_1, UInt<1>("h1"), _signals_T_28) @[Lookup.scala 34:39]
    node _signals_T_29 = mux(_signals_T_19, UInt<2>("h2"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_30 = mux(_signals_T_17, UInt<2>("h2"), _signals_T_29) @[Lookup.scala 34:39]
    node _signals_T_31 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_30) @[Lookup.scala 34:39]
    node _signals_T_32 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_31) @[Lookup.scala 34:39]
    node _signals_T_33 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_32) @[Lookup.scala 34:39]
    node _signals_T_34 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_33) @[Lookup.scala 34:39]
    node _signals_T_35 = mux(_signals_T_7, UInt<1>("h1"), _signals_T_34) @[Lookup.scala 34:39]
    node _signals_T_36 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_35) @[Lookup.scala 34:39]
    node _signals_T_37 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_36) @[Lookup.scala 34:39]
    node signals_1 = mux(_signals_T_1, UInt<1>("h0"), _signals_T_37) @[Lookup.scala 34:39]
    node _signals_T_38 = mux(_signals_T_19, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_39 = mux(_signals_T_17, UInt<1>("h1"), _signals_T_38) @[Lookup.scala 34:39]
    node _signals_T_40 = mux(_signals_T_15, UInt<1>("h1"), _signals_T_39) @[Lookup.scala 34:39]
    node _signals_T_41 = mux(_signals_T_13, UInt<1>("h1"), _signals_T_40) @[Lookup.scala 34:39]
    node _signals_T_42 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_41) @[Lookup.scala 34:39]
    node _signals_T_43 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_42) @[Lookup.scala 34:39]
    node _signals_T_44 = mux(_signals_T_7, UInt<1>("h1"), _signals_T_43) @[Lookup.scala 34:39]
    node _signals_T_45 = mux(_signals_T_5, UInt<1>("h1"), _signals_T_44) @[Lookup.scala 34:39]
    node _signals_T_46 = mux(_signals_T_3, UInt<1>("h1"), _signals_T_45) @[Lookup.scala 34:39]
    node signals_2 = mux(_signals_T_1, UInt<1>("h1"), _signals_T_46) @[Lookup.scala 34:39]
    node _signals_T_47 = mux(_signals_T_19, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_48 = mux(_signals_T_17, UInt<1>("h0"), _signals_T_47) @[Lookup.scala 34:39]
    node _signals_T_49 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_48) @[Lookup.scala 34:39]
    node _signals_T_50 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_49) @[Lookup.scala 34:39]
    node _signals_T_51 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_50) @[Lookup.scala 34:39]
    node _signals_T_52 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_51) @[Lookup.scala 34:39]
    node _signals_T_53 = mux(_signals_T_7, UInt<1>("h1"), _signals_T_52) @[Lookup.scala 34:39]
    node _signals_T_54 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_53) @[Lookup.scala 34:39]
    node _signals_T_55 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_54) @[Lookup.scala 34:39]
    node signals_3 = mux(_signals_T_1, UInt<1>("h0"), _signals_T_55) @[Lookup.scala 34:39]
    node _signals_T_56 = mux(_signals_T_19, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_57 = mux(_signals_T_17, UInt<1>("h0"), _signals_T_56) @[Lookup.scala 34:39]
    node _signals_T_58 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_57) @[Lookup.scala 34:39]
    node _signals_T_59 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_58) @[Lookup.scala 34:39]
    node _signals_T_60 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_59) @[Lookup.scala 34:39]
    node _signals_T_61 = mux(_signals_T_9, UInt<1>("h1"), _signals_T_60) @[Lookup.scala 34:39]
    node _signals_T_62 = mux(_signals_T_7, UInt<1>("h0"), _signals_T_61) @[Lookup.scala 34:39]
    node _signals_T_63 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_62) @[Lookup.scala 34:39]
    node _signals_T_64 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_63) @[Lookup.scala 34:39]
    node signals_4 = mux(_signals_T_1, UInt<1>("h0"), _signals_T_64) @[Lookup.scala 34:39]
    node _signals_T_65 = mux(_signals_T_19, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_66 = mux(_signals_T_17, UInt<1>("h0"), _signals_T_65) @[Lookup.scala 34:39]
    node _signals_T_67 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_66) @[Lookup.scala 34:39]
    node _signals_T_68 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_67) @[Lookup.scala 34:39]
    node _signals_T_69 = mux(_signals_T_11, UInt<1>("h1"), _signals_T_68) @[Lookup.scala 34:39]
    node _signals_T_70 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_69) @[Lookup.scala 34:39]
    node _signals_T_71 = mux(_signals_T_7, UInt<1>("h0"), _signals_T_70) @[Lookup.scala 34:39]
    node _signals_T_72 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_71) @[Lookup.scala 34:39]
    node _signals_T_73 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_72) @[Lookup.scala 34:39]
    node signals_5 = mux(_signals_T_1, UInt<1>("h0"), _signals_T_73) @[Lookup.scala 34:39]
    node _signals_T_74 = mux(_signals_T_19, UInt<2>("h2"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_75 = mux(_signals_T_17, UInt<1>("h1"), _signals_T_74) @[Lookup.scala 34:39]
    node _signals_T_76 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_75) @[Lookup.scala 34:39]
    node _signals_T_77 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_76) @[Lookup.scala 34:39]
    node _signals_T_78 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_77) @[Lookup.scala 34:39]
    node _signals_T_79 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_78) @[Lookup.scala 34:39]
    node _signals_T_80 = mux(_signals_T_7, UInt<1>("h0"), _signals_T_79) @[Lookup.scala 34:39]
    node _signals_T_81 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_80) @[Lookup.scala 34:39]
    node _signals_T_82 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_81) @[Lookup.scala 34:39]
    node signals_6 = mux(_signals_T_1, UInt<1>("h0"), _signals_T_82) @[Lookup.scala 34:39]
    node _signals_T_83 = mux(_signals_T_19, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_84 = mux(_signals_T_17, UInt<1>("h0"), _signals_T_83) @[Lookup.scala 34:39]
    node _signals_T_85 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_84) @[Lookup.scala 34:39]
    node _signals_T_86 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_85) @[Lookup.scala 34:39]
    node _signals_T_87 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_86) @[Lookup.scala 34:39]
    node _signals_T_88 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_87) @[Lookup.scala 34:39]
    node _signals_T_89 = mux(_signals_T_7, UInt<1>("h0"), _signals_T_88) @[Lookup.scala 34:39]
    node _signals_T_90 = mux(_signals_T_5, UInt<2>("h2"), _signals_T_89) @[Lookup.scala 34:39]
    node _signals_T_91 = mux(_signals_T_3, UInt<2>("h2"), _signals_T_90) @[Lookup.scala 34:39]
    node signals_7 = mux(_signals_T_1, UInt<2>("h2"), _signals_T_91) @[Lookup.scala 34:39]
    node _signals_T_92 = mux(_signals_T_19, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_93 = mux(_signals_T_17, UInt<1>("h0"), _signals_T_92) @[Lookup.scala 34:39]
    node _signals_T_94 = mux(_signals_T_15, UInt<1>("h1"), _signals_T_93) @[Lookup.scala 34:39]
    node _signals_T_95 = mux(_signals_T_13, UInt<2>("h2"), _signals_T_94) @[Lookup.scala 34:39]
    node _signals_T_96 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_95) @[Lookup.scala 34:39]
    node _signals_T_97 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_96) @[Lookup.scala 34:39]
    node _signals_T_98 = mux(_signals_T_7, UInt<1>("h0"), _signals_T_97) @[Lookup.scala 34:39]
    node _signals_T_99 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_98) @[Lookup.scala 34:39]
    node _signals_T_100 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_99) @[Lookup.scala 34:39]
    node signals_8 = mux(_signals_T_1, UInt<1>("h0"), _signals_T_100) @[Lookup.scala 34:39]
    io.aluSrc <= signals_0 @[Control.scala 147:13]
    io.memToReg <= signals_1 @[Control.scala 148:15]
    io.regWrite <= signals_2 @[Control.scala 149:15]
    io.memRead <= signals_3 @[Control.scala 150:14]
    io.memWrite <= signals_4 @[Control.scala 151:15]
    io.branch <= signals_5 @[Control.scala 152:13]
    io.jump <= signals_6 @[Control.scala 153:11]
    io.aluOp <= signals_7 @[Control.scala 154:12]
    io.aluSrc1 <= signals_8 @[Control.scala 155:14]

  module Registers :
    input clock : Clock
    input reset : Reset
    output io : { flip readAddress : UInt<5>[2], flip writeEnable : UInt<1>, flip writeAddress : UInt<5>, flip writeData : UInt<32>, readData : UInt<32>[2]}

    wire _reg_WIRE : UInt<32>[32] @[Registers.scala 14:28]
    _reg_WIRE[0] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[1] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[2] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[3] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[4] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[5] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[6] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[7] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[8] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[9] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[10] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[11] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[12] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[13] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[14] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[15] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[16] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[17] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[18] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[19] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[20] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[21] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[22] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[23] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[24] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[25] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[26] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[27] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[28] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[29] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[30] <= UInt<32>("h0") @[Registers.scala 14:28]
    _reg_WIRE[31] <= UInt<32>("h0") @[Registers.scala 14:28]
    reg reg : UInt<32>[32], clock with :
      reset => (reset, _reg_WIRE) @[Registers.scala 14:20]
    when io.writeEnable : @[Registers.scala 16:24]
      reg[io.writeAddress] <= io.writeData @[Registers.scala 17:26]
    node _T = eq(io.readAddress[0], UInt<1>("h0")) @[Registers.scala 20:28]
    when _T : @[Registers.scala 20:37]
      io.readData[0] <= UInt<1>("h0") @[Registers.scala 21:22]
    else :
      io.readData[0] <= reg[io.readAddress[0]] @[Registers.scala 23:22]
    node _T_1 = eq(io.readAddress[1], UInt<1>("h0")) @[Registers.scala 20:28]
    when _T_1 : @[Registers.scala 20:37]
      io.readData[1] <= UInt<1>("h0") @[Registers.scala 21:22]
    else :
      io.readData[1] <= reg[io.readAddress[1]] @[Registers.scala 23:22]


  module ImmediateGen :
    input clock : Clock
    input reset : Reset
    output io : { flip instruction : UInt<32>, out : UInt<32>}

    node opcode = bits(io.instruction, 6, 0) @[ImmediateGen.scala 11:30]
    node _T = eq(opcode, UInt<2>("h3")) @[ImmediateGen.scala 15:12]
    node _T_1 = eq(opcode, UInt<4>("hf")) @[ImmediateGen.scala 15:30]
    node _T_2 = or(_T, _T_1) @[ImmediateGen.scala 15:20]
    node _T_3 = eq(opcode, UInt<5>("h13")) @[ImmediateGen.scala 15:49]
    node _T_4 = or(_T_2, _T_3) @[ImmediateGen.scala 15:39]
    node _T_5 = eq(opcode, UInt<5>("h1b")) @[ImmediateGen.scala 15:68]
    node _T_6 = or(_T_4, _T_5) @[ImmediateGen.scala 15:58]
    node _T_7 = eq(opcode, UInt<7>("h67")) @[ImmediateGen.scala 15:87]
    node _T_8 = or(_T_6, _T_7) @[ImmediateGen.scala 15:77]
    node _T_9 = eq(opcode, UInt<7>("h73")) @[ImmediateGen.scala 15:107]
    node _T_10 = or(_T_8, _T_9) @[ImmediateGen.scala 15:97]
    when _T_10 : @[ImmediateGen.scala 16:5]
      node imm_i = bits(io.instruction, 31, 20) @[ImmediateGen.scala 17:31]
      node _ext_i_T = bits(imm_i, 11, 11) @[ImmediateGen.scala 18:35]
      node _ext_i_T_1 = bits(_ext_i_T, 0, 0) @[Bitwise.scala 77:15]
      node _ext_i_T_2 = mux(_ext_i_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 77:12]
      node ext_i = cat(_ext_i_T_2, imm_i) @[Cat.scala 33:92]
      io.out <= ext_i @[ImmediateGen.scala 19:12]
    else :
      node _T_11 = eq(opcode, UInt<5>("h17")) @[ImmediateGen.scala 23:22]
      node _T_12 = eq(opcode, UInt<6>("h37")) @[ImmediateGen.scala 23:41]
      node _T_13 = or(_T_11, _T_12) @[ImmediateGen.scala 23:31]
      when _T_13 : @[ImmediateGen.scala 23:51]
        node imm_u = bits(io.instruction, 31, 12) @[ImmediateGen.scala 24:33]
        node _ext_u_T = mux(UInt<1>("h0"), UInt<12>("hfff"), UInt<12>("h0")) @[Bitwise.scala 77:12]
        node ext_u = cat(imm_u, _ext_u_T) @[Cat.scala 33:92]
        io.out <= ext_u @[ImmediateGen.scala 26:14]
      else :
        node _T_14 = eq(opcode, UInt<6>("h23")) @[ImmediateGen.scala 29:22]
        when _T_14 : @[ImmediateGen.scala 29:32]
          node _imm_s_T = bits(io.instruction, 31, 25) @[ImmediateGen.scala 30:37]
          node _imm_s_T_1 = bits(io.instruction, 11, 7) @[ImmediateGen.scala 30:61]
          node imm_s = cat(_imm_s_T, _imm_s_T_1) @[Cat.scala 33:92]
          node _ext_s_T = bits(imm_s, 11, 11) @[ImmediateGen.scala 31:37]
          node _ext_s_T_1 = bits(_ext_s_T, 0, 0) @[Bitwise.scala 77:15]
          node _ext_s_T_2 = mux(_ext_s_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 77:12]
          node ext_s = cat(_ext_s_T_2, imm_s) @[Cat.scala 33:92]
          io.out <= ext_s @[ImmediateGen.scala 32:14]
        else :
          node _T_15 = eq(opcode, UInt<7>("h63")) @[ImmediateGen.scala 35:22]
          when _T_15 : @[ImmediateGen.scala 35:32]
            node _imm_sb_T = bits(io.instruction, 31, 31) @[ImmediateGen.scala 37:23]
            node _imm_sb_T_1 = bits(io.instruction, 7, 7) @[ImmediateGen.scala 38:23]
            node _imm_sb_T_2 = bits(io.instruction, 30, 25) @[ImmediateGen.scala 39:23]
            node _imm_sb_T_3 = bits(io.instruction, 11, 8) @[ImmediateGen.scala 40:23]
            node imm_sb_lo = cat(_imm_sb_T_2, _imm_sb_T_3) @[Cat.scala 33:92]
            node imm_sb_hi = cat(_imm_sb_T, _imm_sb_T_1) @[Cat.scala 33:92]
            node imm_sb = cat(imm_sb_hi, imm_sb_lo) @[Cat.scala 33:92]
            node _ext_sb_T = bits(imm_sb, 11, 11) @[ImmediateGen.scala 42:39]
            node _ext_sb_T_1 = bits(_ext_sb_T, 0, 0) @[Bitwise.scala 77:15]
            node _ext_sb_T_2 = mux(_ext_sb_T_1, UInt<19>("h7ffff"), UInt<19>("h0")) @[Bitwise.scala 77:12]
            node ext_sb_hi = cat(_ext_sb_T_2, imm_sb) @[Cat.scala 33:92]
            node ext_sb = cat(ext_sb_hi, UInt<1>("h0")) @[Cat.scala 33:92]
            io.out <= ext_sb @[ImmediateGen.scala 43:14]
          else :
            node _imm_uj_T = bits(io.instruction, 31, 31) @[ImmediateGen.scala 49:21]
            node _imm_uj_T_1 = bits(io.instruction, 19, 12) @[ImmediateGen.scala 50:21]
            node _imm_uj_T_2 = bits(io.instruction, 20, 20) @[ImmediateGen.scala 51:21]
            node _imm_uj_T_3 = bits(io.instruction, 30, 21) @[ImmediateGen.scala 52:21]
            node imm_uj_lo = cat(_imm_uj_T_2, _imm_uj_T_3) @[Cat.scala 33:92]
            node imm_uj_hi = cat(_imm_uj_T, _imm_uj_T_1) @[Cat.scala 33:92]
            node imm_uj = cat(imm_uj_hi, imm_uj_lo) @[Cat.scala 33:92]
            node _ext_uj_T = bits(imm_uj, 19, 19) @[ImmediateGen.scala 54:37]
            node _ext_uj_T_1 = bits(_ext_uj_T, 0, 0) @[Bitwise.scala 77:15]
            node _ext_uj_T_2 = mux(_ext_uj_T_1, UInt<11>("h7ff"), UInt<11>("h0")) @[Bitwise.scala 77:12]
            node ext_uj_hi = cat(_ext_uj_T_2, imm_uj) @[Cat.scala 33:92]
            node ext_uj = cat(ext_uj_hi, UInt<1>("h0")) @[Cat.scala 33:92]
            io.out <= ext_uj @[ImmediateGen.scala 55:12]


  module BranchUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip branch : UInt<1>, flip funct3 : UInt<3>, flip rd1 : UInt<32>, flip rd2 : UInt<32>, flip take_branch : UInt<1>, taken : UInt<1>}

    io.taken is invalid @[BranchUnit.scala 17:12]
    wire check : UInt<1> @[BranchUnit.scala 19:25]
    check is invalid @[BranchUnit.scala 20:9]
    node _T = eq(UInt<1>("h0"), io.funct3) @[BranchUnit.scala 22:21]
    when _T : @[BranchUnit.scala 22:21]
      node _check_T = eq(io.rd1, io.rd2) @[BranchUnit.scala 23:32]
      check <= _check_T @[BranchUnit.scala 23:21]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.funct3) @[BranchUnit.scala 22:21]
      when _T_1 : @[BranchUnit.scala 22:21]
        node _check_T_1 = neq(io.rd1, io.rd2) @[BranchUnit.scala 24:32]
        check <= _check_T_1 @[BranchUnit.scala 24:21]
      else :
        node _T_2 = eq(UInt<3>("h4"), io.funct3) @[BranchUnit.scala 22:21]
        when _T_2 : @[BranchUnit.scala 22:21]
          node _check_T_2 = asSInt(io.rd1) @[BranchUnit.scala 25:32]
          node _check_T_3 = asSInt(io.rd2) @[BranchUnit.scala 25:48]
          node _check_T_4 = lt(_check_T_2, _check_T_3) @[BranchUnit.scala 25:39]
          check <= _check_T_4 @[BranchUnit.scala 25:21]
        else :
          node _T_3 = eq(UInt<3>("h5"), io.funct3) @[BranchUnit.scala 22:21]
          when _T_3 : @[BranchUnit.scala 22:21]
            node _check_T_5 = asSInt(io.rd1) @[BranchUnit.scala 26:32]
            node _check_T_6 = asSInt(io.rd2) @[BranchUnit.scala 26:49]
            node _check_T_7 = geq(_check_T_5, _check_T_6) @[BranchUnit.scala 26:39]
            check <= _check_T_7 @[BranchUnit.scala 26:21]
          else :
            node _T_4 = eq(UInt<3>("h6"), io.funct3) @[BranchUnit.scala 22:21]
            when _T_4 : @[BranchUnit.scala 22:21]
              node _check_T_8 = lt(io.rd1, io.rd2) @[BranchUnit.scala 27:32]
              check <= _check_T_8 @[BranchUnit.scala 27:21]
            else :
              node _T_5 = eq(UInt<3>("h7"), io.funct3) @[BranchUnit.scala 22:21]
              when _T_5 : @[BranchUnit.scala 22:21]
                node _check_T_9 = geq(io.rd1, io.rd2) @[BranchUnit.scala 28:32]
                check <= _check_T_9 @[BranchUnit.scala 28:21]
    node _io_taken_T = and(check, io.branch) @[BranchUnit.scala 31:21]
    node _io_taken_T_1 = and(_io_taken_T, io.take_branch) @[BranchUnit.scala 31:33]
    io.taken <= _io_taken_T_1 @[BranchUnit.scala 31:12]

  module InstructionDecode :
    input clock : Clock
    input reset : Reset
    output io : { flip id_instruction : UInt<32>, flip writeData : UInt<32>, flip writeReg : UInt<5>, flip pcAddress : UInt<32>, flip ctl_writeEnable : UInt<1>, flip id_ex_mem_read : UInt<1>, flip ex_mem_mem_read : UInt<1>, flip dmem_resp_valid : UInt<1>, flip id_ex_rd : UInt<5>, flip ex_mem_rd : UInt<5>, flip id_ex_branch : UInt<1>, flip ex_mem_ins : UInt<32>, flip mem_wb_ins : UInt<32>, flip ex_ins : UInt<32>, flip ex_result : UInt<32>, flip ex_mem_result : UInt<32>, flip mem_wb_result : UInt<32>, flip id_ex_regWr : UInt<1>, flip ex_mem_regWr : UInt<1>, flip csr_Ex : UInt<1>, flip csr_Mem : UInt<1>, flip csr_Wb : UInt<1>, flip csr_Ex_data : UInt<32>, flip csr_Mem_data : UInt<32>, flip csr_Wb_data : UInt<32>, flip dmem_data : UInt<32>, immediate : UInt<32>, writeRegAddress : UInt<5>, readData1 : UInt<32>, readData2 : UInt<32>, func7 : UInt<7>, func3 : UInt<3>, ctl_aluSrc : UInt<1>, ctl_memToReg : UInt<2>, ctl_regWrite : UInt<1>, ctl_memRead : UInt<1>, ctl_memWrite : UInt<1>, ctl_branch : UInt<1>, ctl_aluOp : UInt<2>, ctl_jump : UInt<2>, ctl_aluSrc1 : UInt<2>, hdu_pcWrite : UInt<1>, hdu_if_reg_write : UInt<1>, pcSrc : UInt<1>, pcPlusOffset : UInt<32>, ifid_flush : UInt<1>, stall : UInt<1>, flip csr_i_misa : UInt<32>, flip csr_i_mhartid : UInt<32>, csr_o_data : UInt<32>, is_csr : UInt<1>, fscr_o_data : UInt<32>}

    inst csr of CSR @[InstructionDecode.scala 74:19]
    csr.clock <= clock
    csr.reset <= reset
    csr.io.i_misa_value <= io.csr_i_misa @[InstructionDecode.scala 75:31]
    csr.io.i_mhartid_value <= io.csr_i_mhartid @[InstructionDecode.scala 76:31]
    node _csr_io_i_imm_T = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 77:51]
    csr.io.i_imm <= _csr_io_i_imm_T @[InstructionDecode.scala 77:31]
    node _csr_io_i_opr_T = bits(io.id_instruction, 14, 12) @[InstructionDecode.scala 78:51]
    csr.io.i_opr <= _csr_io_i_opr_T @[InstructionDecode.scala 78:31]
    node _csr_io_i_addr_T = bits(io.id_instruction, 31, 20) @[InstructionDecode.scala 79:51]
    csr.io.i_addr <= _csr_io_i_addr_T @[InstructionDecode.scala 79:31]
    node _csr_io_i_w_en_T = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 80:65]
    node _csr_io_i_w_en_T_1 = neq(_csr_io_i_w_en_T, UInt<1>("h0")) @[InstructionDecode.scala 80:74]
    node _csr_io_i_w_en_T_2 = and(io.is_csr, _csr_io_i_w_en_T_1) @[InstructionDecode.scala 80:44]
    csr.io.i_w_en <= _csr_io_i_w_en_T_2 @[InstructionDecode.scala 80:31]
    node _io_is_csr_T = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 82:51]
    node _io_is_csr_T_1 = eq(_io_is_csr_T, UInt<7>("h73")) @[InstructionDecode.scala 82:58]
    io.is_csr <= _io_is_csr_T_1 @[InstructionDecode.scala 82:31]
    io.csr_o_data <= csr.io.o_data @[InstructionDecode.scala 83:31]
    io.fscr_o_data <= csr.io.fcsr_o_data @[InstructionDecode.scala 84:31]
    inst csrController of CSRController @[InstructionDecode.scala 86:29]
    csrController.clock <= clock
    csrController.reset <= reset
    csrController.io.regWrExecute <= io.id_ex_regWr @[InstructionDecode.scala 87:36]
    csrController.io.rdSelExecute <= io.id_ex_rd @[InstructionDecode.scala 88:36]
    csrController.io.csrWrExecute <= io.csr_Ex @[InstructionDecode.scala 89:36]
    csrController.io.regWrMemory <= io.ex_mem_regWr @[InstructionDecode.scala 90:36]
    csrController.io.rdSelMemory <= io.ex_mem_rd @[InstructionDecode.scala 91:36]
    csrController.io.csrWrMemory <= io.csr_Mem @[InstructionDecode.scala 92:36]
    csrController.io.regWrWriteback <= io.ctl_writeEnable @[InstructionDecode.scala 93:36]
    csrController.io.rdSelWriteback <= io.writeReg @[InstructionDecode.scala 94:36]
    csrController.io.csrWrWriteback <= io.csr_Wb @[InstructionDecode.scala 95:36]
    node _csrController_io_rs1SelDecode_T = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 96:56]
    csrController.io.rs1SelDecode <= _csrController_io_rs1SelDecode_T @[InstructionDecode.scala 96:36]
    node _csrController_io_csrInstDecode_T = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 97:56]
    node _csrController_io_csrInstDecode_T_1 = eq(_csrController_io_csrInstDecode_T, UInt<7>("h73")) @[InstructionDecode.scala 97:63]
    csrController.io.csrInstDecode <= _csrController_io_csrInstDecode_T_1 @[InstructionDecode.scala 97:36]
    csrController.io.csrInstIsImmd <= UInt<1>("h0") @[InstructionDecode.scala 98:36]
    inst hdu of HazardUnit @[InstructionDecode.scala 101:19]
    hdu.clock <= clock
    hdu.reset <= reset
    hdu.io.dmem_resp_valid <= io.dmem_resp_valid @[InstructionDecode.scala 102:26]
    hdu.io.id_ex_memRead <= io.id_ex_mem_read @[InstructionDecode.scala 103:24]
    hdu.io.ex_mem_memRead <= io.ex_mem_mem_read @[InstructionDecode.scala 105:25]
    hdu.io.id_ex_rd <= io.id_ex_rd @[InstructionDecode.scala 106:19]
    hdu.io.id_ex_branch <= io.id_ex_branch @[InstructionDecode.scala 107:23]
    hdu.io.ex_mem_rd <= io.ex_mem_rd @[InstructionDecode.scala 108:20]
    node _hdu_io_id_rs1_T = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 109:37]
    hdu.io.id_rs1 <= _hdu_io_id_rs1_T @[InstructionDecode.scala 109:17]
    node _hdu_io_id_rs2_T = bits(io.id_instruction, 24, 20) @[InstructionDecode.scala 110:37]
    hdu.io.id_rs2 <= _hdu_io_id_rs2_T @[InstructionDecode.scala 110:17]
    hdu.io.jump <= io.ctl_jump @[InstructionDecode.scala 111:15]
    hdu.io.branch <= io.ctl_branch @[InstructionDecode.scala 112:17]
    io.hdu_pcWrite <= hdu.io.pc_write @[InstructionDecode.scala 113:18]
    io.hdu_if_reg_write <= hdu.io.if_reg_write @[InstructionDecode.scala 114:23]
    inst control of Control @[InstructionDecode.scala 117:23]
    control.clock <= clock
    control.reset <= reset
    control.io.in <= io.id_instruction @[InstructionDecode.scala 118:17]
    io.ctl_aluOp <= control.io.aluOp @[InstructionDecode.scala 119:16]
    io.ctl_aluSrc <= control.io.aluSrc @[InstructionDecode.scala 120:17]
    io.ctl_aluSrc1 <= control.io.aluSrc1 @[InstructionDecode.scala 121:18]
    io.ctl_branch <= control.io.branch @[InstructionDecode.scala 122:17]
    io.ctl_memRead <= control.io.memRead @[InstructionDecode.scala 123:18]
    io.ctl_memToReg <= control.io.memToReg @[InstructionDecode.scala 124:19]
    io.ctl_jump <= control.io.jump @[InstructionDecode.scala 125:15]
    node _T = neq(io.id_instruction, UInt<5>("h13")) @[InstructionDecode.scala 126:44]
    node _T_1 = and(hdu.io.ctl_mux, _T) @[InstructionDecode.scala 126:23]
    when _T_1 : @[InstructionDecode.scala 126:57]
      io.ctl_memWrite <= control.io.memWrite @[InstructionDecode.scala 127:21]
      io.ctl_regWrite <= control.io.regWrite @[InstructionDecode.scala 128:21]
    else :
      io.ctl_memWrite <= UInt<1>("h0") @[InstructionDecode.scala 131:21]
      io.ctl_regWrite <= UInt<1>("h0") @[InstructionDecode.scala 132:21]
    inst registers of Registers @[InstructionDecode.scala 136:25]
    registers.clock <= clock
    registers.reset <= reset
    node registerRs1 = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 138:38]
    node registerRs2 = bits(io.id_instruction, 24, 20) @[InstructionDecode.scala 139:38]
    registers.io.readAddress[0] <= registerRs1 @[InstructionDecode.scala 140:31]
    registers.io.readAddress[1] <= registerRs2 @[InstructionDecode.scala 141:31]
    node _registers_io_writeEnable_T = or(io.ctl_writeEnable, io.csr_Wb) @[InstructionDecode.scala 142:50]
    registers.io.writeEnable <= _registers_io_writeEnable_T @[InstructionDecode.scala 142:28]
    registers.io.writeAddress <= io.writeReg @[InstructionDecode.scala 143:29]
    node _registers_io_writeData_T = mux(io.csr_Wb, io.csr_Wb_data, io.writeData) @[InstructionDecode.scala 144:32]
    registers.io.writeData <= _registers_io_writeData_T @[InstructionDecode.scala 144:26]
    node _T_2 = eq(io.writeReg, registerRs1) @[InstructionDecode.scala 147:43]
    node _T_3 = and(io.ctl_writeEnable, _T_2) @[InstructionDecode.scala 147:27]
    when _T_3 : @[InstructionDecode.scala 147:60]
      node _T_4 = eq(registerRs1, UInt<1>("h0")) @[InstructionDecode.scala 148:22]
      when _T_4 : @[InstructionDecode.scala 148:30]
        io.readData1 <= UInt<1>("h0") @[InstructionDecode.scala 149:20]
      else :
        io.readData1 <= io.writeData @[InstructionDecode.scala 151:20]
    else :
      io.readData1 <= registers.io.readData[0] @[InstructionDecode.scala 154:18]
    node _T_5 = eq(io.writeReg, registerRs2) @[InstructionDecode.scala 156:43]
    node _T_6 = and(io.ctl_writeEnable, _T_5) @[InstructionDecode.scala 156:27]
    when _T_6 : @[InstructionDecode.scala 156:60]
      node _T_7 = eq(registerRs2, UInt<1>("h0")) @[InstructionDecode.scala 157:22]
      when _T_7 : @[InstructionDecode.scala 157:30]
        io.readData2 <= UInt<1>("h0") @[InstructionDecode.scala 158:20]
      else :
        io.readData2 <= io.writeData @[InstructionDecode.scala 160:20]
    else :
      io.readData2 <= registers.io.readData[1] @[InstructionDecode.scala 163:18]
    inst immediate of ImmediateGen @[InstructionDecode.scala 167:25]
    immediate.clock <= clock
    immediate.reset <= reset
    immediate.io.instruction <= io.id_instruction @[InstructionDecode.scala 168:28]
    io.immediate <= immediate.io.out @[InstructionDecode.scala 169:16]
    wire input1 : UInt<32> @[InstructionDecode.scala 172:20]
    wire input2 : UInt<32> @[InstructionDecode.scala 173:20]
    node _T_8 = bits(io.ex_mem_ins, 11, 7) @[InstructionDecode.scala 175:37]
    node _T_9 = eq(registerRs1, _T_8) @[InstructionDecode.scala 175:20]
    when _T_9 : @[InstructionDecode.scala 175:46]
      input1 <= io.ex_mem_result @[InstructionDecode.scala 176:12]
    else :
      node _T_10 = bits(io.mem_wb_ins, 11, 7) @[InstructionDecode.scala 177:43]
      node _T_11 = eq(registerRs1, _T_10) @[InstructionDecode.scala 177:26]
      when _T_11 : @[InstructionDecode.scala 177:52]
        input1 <= io.mem_wb_result @[InstructionDecode.scala 178:14]
      else :
        input1 <= io.readData1 @[InstructionDecode.scala 181:14]
    node _T_12 = bits(io.ex_mem_ins, 11, 7) @[InstructionDecode.scala 183:37]
    node _T_13 = eq(registerRs2, _T_12) @[InstructionDecode.scala 183:20]
    when _T_13 : @[InstructionDecode.scala 183:46]
      input2 <= io.ex_mem_result @[InstructionDecode.scala 184:12]
    else :
      node _T_14 = bits(io.mem_wb_ins, 11, 7) @[InstructionDecode.scala 185:43]
      node _T_15 = eq(registerRs2, _T_14) @[InstructionDecode.scala 185:26]
      when _T_15 : @[InstructionDecode.scala 185:52]
        input2 <= io.mem_wb_result @[InstructionDecode.scala 186:14]
      else :
        input2 <= io.readData2 @[InstructionDecode.scala 189:14]
    inst bu of BranchUnit @[InstructionDecode.scala 193:18]
    bu.clock <= clock
    bu.reset <= reset
    bu.io.branch <= io.ctl_branch @[InstructionDecode.scala 194:16]
    node _bu_io_funct3_T = bits(io.id_instruction, 14, 12) @[InstructionDecode.scala 195:36]
    bu.io.funct3 <= _bu_io_funct3_T @[InstructionDecode.scala 195:16]
    bu.io.rd1 <= input1 @[InstructionDecode.scala 196:13]
    bu.io.rd2 <= input2 @[InstructionDecode.scala 197:13]
    bu.io.take_branch <= hdu.io.take_branch @[InstructionDecode.scala 198:21]
    hdu.io.taken <= bu.io.taken @[InstructionDecode.scala 199:16]
    wire j_offset : UInt<32> @[InstructionDecode.scala 202:22]
    node _T_16 = bits(io.ex_ins, 11, 7) @[InstructionDecode.scala 203:35]
    node _T_17 = eq(registerRs1, _T_16) @[InstructionDecode.scala 203:22]
    when _T_17 : @[InstructionDecode.scala 203:43]
      j_offset <= io.ex_result @[InstructionDecode.scala 204:16]
    else :
      node _T_18 = bits(io.ex_mem_ins, 11, 7) @[InstructionDecode.scala 205:45]
      node _T_19 = eq(registerRs1, _T_18) @[InstructionDecode.scala 205:28]
      when _T_19 : @[InstructionDecode.scala 205:54]
        j_offset <= io.ex_mem_result @[InstructionDecode.scala 206:14]
      else :
        node _T_20 = bits(io.mem_wb_ins, 11, 7) @[InstructionDecode.scala 207:43]
        node _T_21 = eq(registerRs1, _T_20) @[InstructionDecode.scala 207:26]
        when _T_21 : @[InstructionDecode.scala 207:52]
          j_offset <= io.mem_wb_result @[InstructionDecode.scala 208:14]
        else :
          node _T_22 = bits(io.ex_ins, 11, 7) @[InstructionDecode.scala 209:39]
          node _T_23 = eq(registerRs1, _T_22) @[InstructionDecode.scala 209:26]
          when _T_23 : @[InstructionDecode.scala 209:47]
            j_offset <= io.ex_result @[InstructionDecode.scala 210:14]
          else :
            j_offset <= io.readData1 @[InstructionDecode.scala 212:16]
    node _T_24 = eq(io.ctl_jump, UInt<1>("h1")) @[InstructionDecode.scala 216:20]
    when _T_24 : @[InstructionDecode.scala 216:29]
      node _io_pcPlusOffset_T = add(io.pcAddress, io.immediate) @[InstructionDecode.scala 217:37]
      node _io_pcPlusOffset_T_1 = tail(_io_pcPlusOffset_T, 1) @[InstructionDecode.scala 217:37]
      io.pcPlusOffset <= _io_pcPlusOffset_T_1 @[InstructionDecode.scala 217:21]
    else :
      node _T_25 = eq(io.ctl_jump, UInt<2>("h2")) @[InstructionDecode.scala 218:26]
      when _T_25 : @[InstructionDecode.scala 218:35]
        node _io_pcPlusOffset_T_2 = add(j_offset, io.immediate) @[InstructionDecode.scala 219:35]
        node _io_pcPlusOffset_T_3 = tail(_io_pcPlusOffset_T_2, 1) @[InstructionDecode.scala 219:35]
        io.pcPlusOffset <= _io_pcPlusOffset_T_3 @[InstructionDecode.scala 219:23]
      else :
        node _io_pcPlusOffset_T_4 = add(io.pcAddress, immediate.io.out) @[InstructionDecode.scala 222:39]
        node _io_pcPlusOffset_T_5 = tail(_io_pcPlusOffset_T_4, 1) @[InstructionDecode.scala 222:39]
        io.pcPlusOffset <= _io_pcPlusOffset_T_5 @[InstructionDecode.scala 222:23]
    node _T_26 = neq(io.ctl_jump, UInt<1>("h0")) @[InstructionDecode.scala 225:35]
    node _T_27 = or(bu.io.taken, _T_26) @[InstructionDecode.scala 225:20]
    when _T_27 : @[InstructionDecode.scala 225:44]
      io.pcSrc <= UInt<1>("h1") @[InstructionDecode.scala 226:14]
    else :
      io.pcSrc <= UInt<1>("h0") @[InstructionDecode.scala 228:14]
    io.ifid_flush <= hdu.io.ifid_flush @[InstructionDecode.scala 232:17]
    node _io_writeRegAddress_T = bits(io.id_instruction, 11, 7) @[InstructionDecode.scala 234:42]
    io.writeRegAddress <= _io_writeRegAddress_T @[InstructionDecode.scala 234:22]
    node _io_func3_T = bits(io.id_instruction, 14, 12) @[InstructionDecode.scala 235:32]
    io.func3 <= _io_func3_T @[InstructionDecode.scala 235:12]
    node _T_28 = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 236:26]
    node _T_29 = eq(_T_28, UInt<6>("h33")) @[InstructionDecode.scala 236:32]
    node _T_30 = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 236:71]
    node _T_31 = eq(_T_30, UInt<5>("h13")) @[InstructionDecode.scala 236:77]
    node _T_32 = eq(io.func3, UInt<3>("h5")) @[InstructionDecode.scala 236:107]
    node _T_33 = and(_T_31, _T_32) @[InstructionDecode.scala 236:95]
    node _T_34 = or(_T_29, _T_33) @[InstructionDecode.scala 236:50]
    when _T_34 : @[InstructionDecode.scala 236:117]
      node _io_func7_T = bits(io.id_instruction, 31, 25) @[InstructionDecode.scala 237:34]
      io.func7 <= _io_func7_T @[InstructionDecode.scala 237:14]
    else :
      io.func7 <= UInt<1>("h0") @[InstructionDecode.scala 239:14]
    node _io_stall_T = eq(io.func7, UInt<1>("h1")) @[InstructionDecode.scala 242:24]
    node _io_stall_T_1 = eq(io.func3, UInt<3>("h4")) @[InstructionDecode.scala 242:45]
    node _io_stall_T_2 = eq(io.func3, UInt<3>("h5")) @[InstructionDecode.scala 242:65]
    node _io_stall_T_3 = or(_io_stall_T_1, _io_stall_T_2) @[InstructionDecode.scala 242:53]
    node _io_stall_T_4 = eq(io.func3, UInt<3>("h6")) @[InstructionDecode.scala 242:85]
    node _io_stall_T_5 = or(_io_stall_T_3, _io_stall_T_4) @[InstructionDecode.scala 242:73]
    node _io_stall_T_6 = eq(io.func3, UInt<3>("h7")) @[InstructionDecode.scala 242:105]
    node _io_stall_T_7 = or(_io_stall_T_5, _io_stall_T_6) @[InstructionDecode.scala 242:93]
    node _io_stall_T_8 = and(_io_stall_T, _io_stall_T_7) @[InstructionDecode.scala 242:32]
    io.stall <= _io_stall_T_8 @[InstructionDecode.scala 242:12]
    node _T_35 = mux(io.ex_mem_mem_read, io.dmem_data, io.ex_mem_result) @[InstructionDecode.scala 246:15]
    node _csr_io_i_data_T = eq(UInt<1>("h1"), csrController.io.forwardRS1) @[Mux.scala 81:61]
    node _csr_io_i_data_T_1 = mux(_csr_io_i_data_T, io.ex_result, registers.io.readData[1]) @[Mux.scala 81:58]
    node _csr_io_i_data_T_2 = eq(UInt<2>("h2"), csrController.io.forwardRS1) @[Mux.scala 81:61]
    node _csr_io_i_data_T_3 = mux(_csr_io_i_data_T_2, _T_35, _csr_io_i_data_T_1) @[Mux.scala 81:58]
    node _csr_io_i_data_T_4 = eq(UInt<2>("h3"), csrController.io.forwardRS1) @[Mux.scala 81:61]
    node _csr_io_i_data_T_5 = mux(_csr_io_i_data_T_4, io.writeData, _csr_io_i_data_T_3) @[Mux.scala 81:58]
    node _csr_io_i_data_T_6 = eq(UInt<3>("h4"), csrController.io.forwardRS1) @[Mux.scala 81:61]
    node _csr_io_i_data_T_7 = mux(_csr_io_i_data_T_6, io.csr_Ex_data, _csr_io_i_data_T_5) @[Mux.scala 81:58]
    node _csr_io_i_data_T_8 = eq(UInt<3>("h5"), csrController.io.forwardRS1) @[Mux.scala 81:61]
    node _csr_io_i_data_T_9 = mux(_csr_io_i_data_T_8, io.csr_Mem_data, _csr_io_i_data_T_7) @[Mux.scala 81:58]
    node _csr_io_i_data_T_10 = eq(UInt<3>("h6"), csrController.io.forwardRS1) @[Mux.scala 81:61]
    node _csr_io_i_data_T_11 = mux(_csr_io_i_data_T_10, io.csr_Wb_data, _csr_io_i_data_T_9) @[Mux.scala 81:58]
    csr.io.i_data <= _csr_io_i_data_T_11 @[InstructionDecode.scala 253:17]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip input1 : UInt<32>, flip input2 : UInt<32>, flip aluCtl : UInt<4>, zero : UInt<1>, result : UInt<32>}

    node _io_result_T = eq(io.aluCtl, UInt<1>("h0")) @[ALU.scala 17:18]
    node _io_result_T_1 = and(io.input1, io.input2) @[ALU.scala 17:41]
    node _io_result_T_2 = eq(io.aluCtl, UInt<1>("h1")) @[ALU.scala 18:18]
    node _io_result_T_3 = or(io.input1, io.input2) @[ALU.scala 18:41]
    node _io_result_T_4 = eq(io.aluCtl, UInt<2>("h2")) @[ALU.scala 19:18]
    node _io_result_T_5 = add(io.input1, io.input2) @[ALU.scala 19:41]
    node _io_result_T_6 = tail(_io_result_T_5, 1) @[ALU.scala 19:41]
    node _io_result_T_7 = eq(io.aluCtl, UInt<2>("h3")) @[ALU.scala 20:18]
    node _io_result_T_8 = sub(io.input1, io.input2) @[ALU.scala 20:41]
    node _io_result_T_9 = tail(_io_result_T_8, 1) @[ALU.scala 20:41]
    node _io_result_T_10 = eq(io.aluCtl, UInt<3>("h4")) @[ALU.scala 21:18]
    node _io_result_T_11 = asSInt(io.input1) @[ALU.scala 21:41]
    node _io_result_T_12 = asSInt(io.input2) @[ALU.scala 21:60]
    node _io_result_T_13 = lt(_io_result_T_11, _io_result_T_12) @[ALU.scala 21:48]
    node _io_result_T_14 = eq(io.aluCtl, UInt<3>("h5")) @[ALU.scala 22:18]
    node _io_result_T_15 = lt(io.input1, io.input2) @[ALU.scala 22:41]
    node _io_result_T_16 = eq(io.aluCtl, UInt<3>("h6")) @[ALU.scala 23:18]
    node _io_result_T_17 = bits(io.input2, 4, 0) @[ALU.scala 23:53]
    node _io_result_T_18 = dshl(io.input1, _io_result_T_17) @[ALU.scala 23:41]
    node _io_result_T_19 = eq(io.aluCtl, UInt<3>("h7")) @[ALU.scala 24:18]
    node _io_result_T_20 = bits(io.input2, 4, 0) @[ALU.scala 24:53]
    node _io_result_T_21 = dshr(io.input1, _io_result_T_20) @[ALU.scala 24:41]
    node _io_result_T_22 = eq(io.aluCtl, UInt<4>("h8")) @[ALU.scala 25:18]
    node _io_result_T_23 = asSInt(io.input1) @[ALU.scala 25:41]
    node _io_result_T_24 = bits(io.input2, 4, 0) @[ALU.scala 25:60]
    node _io_result_T_25 = dshr(_io_result_T_23, _io_result_T_24) @[ALU.scala 25:48]
    node _io_result_T_26 = asUInt(_io_result_T_25) @[ALU.scala 25:68]
    node _io_result_T_27 = eq(io.aluCtl, UInt<4>("h9")) @[ALU.scala 26:18]
    node _io_result_T_28 = xor(io.input1, io.input2) @[ALU.scala 26:41]
    node _io_result_T_29 = mux(_io_result_T_27, _io_result_T_28, UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_result_T_30 = mux(_io_result_T_22, _io_result_T_26, _io_result_T_29) @[Mux.scala 101:16]
    node _io_result_T_31 = mux(_io_result_T_19, _io_result_T_21, _io_result_T_30) @[Mux.scala 101:16]
    node _io_result_T_32 = mux(_io_result_T_16, _io_result_T_18, _io_result_T_31) @[Mux.scala 101:16]
    node _io_result_T_33 = mux(_io_result_T_14, _io_result_T_15, _io_result_T_32) @[Mux.scala 101:16]
    node _io_result_T_34 = mux(_io_result_T_10, _io_result_T_13, _io_result_T_33) @[Mux.scala 101:16]
    node _io_result_T_35 = mux(_io_result_T_7, _io_result_T_9, _io_result_T_34) @[Mux.scala 101:16]
    node _io_result_T_36 = mux(_io_result_T_4, _io_result_T_6, _io_result_T_35) @[Mux.scala 101:16]
    node _io_result_T_37 = mux(_io_result_T_2, _io_result_T_3, _io_result_T_36) @[Mux.scala 101:16]
    node _io_result_T_38 = mux(_io_result_T, _io_result_T_1, _io_result_T_37) @[Mux.scala 101:16]
    io.result <= _io_result_T_38 @[ALU.scala 14:13]
    io.zero is invalid @[ALU.scala 29:11]

  module AluControl :
    input clock : Clock
    input reset : Reset
    output io : { flip aluOp : UInt<2>, flip f7 : UInt<1>, flip f3 : UInt<3>, flip aluSrc : UInt<1>, out : UInt<4>}

    io.out <= UInt<4>("hf") @[AluControl.scala 31:10]
    node _T = eq(io.aluOp, UInt<1>("h0")) @[AluControl.scala 33:17]
    when _T : @[AluControl.scala 33:26]
      io.out <= UInt<2>("h2") @[AluControl.scala 34:12]
    else :
      node _T_1 = eq(UInt<1>("h0"), io.f3) @[AluControl.scala 36:19]
      when _T_1 : @[AluControl.scala 36:19]
        node _T_2 = eq(io.aluSrc, UInt<1>("h0")) @[AluControl.scala 38:14]
        node _T_3 = eq(io.f7, UInt<1>("h0")) @[AluControl.scala 38:34]
        node _T_4 = or(_T_2, _T_3) @[AluControl.scala 38:25]
        when _T_4 : @[AluControl.scala 38:43]
          io.out <= UInt<2>("h2") @[AluControl.scala 39:18]
        else :
          io.out <= UInt<2>("h3") @[AluControl.scala 42:20]
      else :
        node _T_5 = eq(UInt<1>("h1"), io.f3) @[AluControl.scala 36:19]
        when _T_5 : @[AluControl.scala 36:19]
          io.out <= UInt<3>("h6") @[AluControl.scala 46:16]
        else :
          node _T_6 = eq(UInt<2>("h2"), io.f3) @[AluControl.scala 36:19]
          when _T_6 : @[AluControl.scala 36:19]
            io.out <= UInt<3>("h4") @[AluControl.scala 49:16]
          else :
            node _T_7 = eq(UInt<2>("h3"), io.f3) @[AluControl.scala 36:19]
            when _T_7 : @[AluControl.scala 36:19]
              io.out <= UInt<3>("h5") @[AluControl.scala 52:16]
            else :
              node _T_8 = eq(UInt<3>("h5"), io.f3) @[AluControl.scala 36:19]
              when _T_8 : @[AluControl.scala 36:19]
                node _T_9 = eq(io.f7, UInt<1>("h0")) @[AluControl.scala 55:20]
                when _T_9 : @[AluControl.scala 55:29]
                  io.out <= UInt<3>("h7") @[AluControl.scala 56:18]
                else :
                  io.out <= UInt<4>("h8") @[AluControl.scala 58:18]
              else :
                node _T_10 = eq(UInt<3>("h7"), io.f3) @[AluControl.scala 36:19]
                when _T_10 : @[AluControl.scala 36:19]
                  io.out <= UInt<1>("h0") @[AluControl.scala 62:16]
                else :
                  node _T_11 = eq(UInt<3>("h6"), io.f3) @[AluControl.scala 36:19]
                  when _T_11 : @[AluControl.scala 36:19]
                    io.out <= UInt<1>("h1") @[AluControl.scala 65:16]
                  else :
                    node _T_12 = eq(UInt<3>("h4"), io.f3) @[AluControl.scala 36:19]
                    when _T_12 : @[AluControl.scala 36:19]
                      io.out <= UInt<4>("h9") @[AluControl.scala 68:16]


  module ForwardingUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip ex_reg_rd : UInt<5>, flip mem_reg_rd : UInt<5>, flip reg_rs1 : UInt<5>, flip reg_rs2 : UInt<5>, flip ex_regWrite : UInt<1>, flip mem_regWrite : UInt<1>, forwardA : UInt<2>, forwardB : UInt<2>}

    io.forwardA is invalid @[ForwardingUnit.scala 18:15]
    io.forwardB is invalid @[ForwardingUnit.scala 19:15]
    node _T = eq(io.reg_rs1, io.ex_reg_rd) @[ForwardingUnit.scala 21:19]
    node _T_1 = neq(io.ex_reg_rd, UInt<1>("h0")) @[ForwardingUnit.scala 21:52]
    node _T_2 = and(_T, _T_1) @[ForwardingUnit.scala 21:36]
    node _T_3 = and(_T_2, io.ex_regWrite) @[ForwardingUnit.scala 21:60]
    when _T_3 : @[ForwardingUnit.scala 21:79]
      io.forwardA <= UInt<1>("h1") @[ForwardingUnit.scala 22:17]
    else :
      node _T_4 = eq(io.reg_rs1, io.mem_reg_rd) @[ForwardingUnit.scala 24:18]
      node _T_5 = neq(io.mem_reg_rd, UInt<1>("h0")) @[ForwardingUnit.scala 24:53]
      node _T_6 = and(_T_4, _T_5) @[ForwardingUnit.scala 24:36]
      node _T_7 = and(_T_6, io.mem_regWrite) @[ForwardingUnit.scala 24:61]
      when _T_7 : @[ForwardingUnit.scala 25:7]
        io.forwardA <= UInt<2>("h2") @[ForwardingUnit.scala 26:19]
      else :
        io.forwardA <= UInt<1>("h0") @[ForwardingUnit.scala 29:19]
    node _T_8 = eq(io.reg_rs2, io.ex_reg_rd) @[ForwardingUnit.scala 32:19]
    node _T_9 = neq(io.ex_reg_rd, UInt<1>("h0")) @[ForwardingUnit.scala 32:52]
    node _T_10 = and(_T_8, _T_9) @[ForwardingUnit.scala 32:36]
    node _T_11 = and(_T_10, io.ex_regWrite) @[ForwardingUnit.scala 32:60]
    when _T_11 : @[ForwardingUnit.scala 32:79]
      io.forwardB <= UInt<1>("h1") @[ForwardingUnit.scala 33:17]
    else :
      node _T_12 = eq(io.reg_rs2, io.mem_reg_rd) @[ForwardingUnit.scala 35:18]
      node _T_13 = neq(io.mem_reg_rd, UInt<1>("h0")) @[ForwardingUnit.scala 35:53]
      node _T_14 = and(_T_12, _T_13) @[ForwardingUnit.scala 35:36]
      node _T_15 = and(_T_14, io.mem_regWrite) @[ForwardingUnit.scala 35:61]
      when _T_15 : @[ForwardingUnit.scala 36:7]
        io.forwardB <= UInt<2>("h2") @[ForwardingUnit.scala 37:19]
      else :
        io.forwardB <= UInt<1>("h0") @[ForwardingUnit.scala 40:19]


  module MDU :
    input clock : Clock
    input reset : Reset
    output io : { flip src_a : UInt<32>, flip src_b : UInt<32>, flip op : UInt<5>, flip valid : UInt<1>, ready : UInt<1>, output : { valid : UInt<1>, bits : UInt<32>}}

    wire result : UInt<64> @[MDU.scala 32:22]
    node _result_T = eq(io.op, UInt<1>("h0")) @[MDU.scala 34:16]
    node _result_T_1 = eq(io.op, UInt<2>("h3")) @[MDU.scala 34:33]
    node _result_T_2 = or(_result_T, _result_T_1) @[MDU.scala 34:24]
    node _result_T_3 = mul(io.src_a, io.src_b) @[MDU.scala 34:58]
    node _result_T_4 = eq(io.op, UInt<2>("h2")) @[MDU.scala 35:16]
    node _result_T_5 = asSInt(io.src_a) @[MDU.scala 35:59]
    node _result_T_6 = cvt(io.src_b) @[MDU.scala 35:66]
    node _result_T_7 = mul(_result_T_5, _result_T_6) @[MDU.scala 35:66]
    node _result_T_8 = tail(_result_T_7, 1) @[MDU.scala 35:66]
    node _result_T_9 = asSInt(_result_T_8) @[MDU.scala 35:66]
    node _result_T_10 = asUInt(_result_T_9) @[MDU.scala 35:78]
    node _result_T_11 = eq(io.op, UInt<1>("h1")) @[MDU.scala 36:16]
    node _result_T_12 = asSInt(io.src_a) @[MDU.scala 36:59]
    node _result_T_13 = asSInt(io.src_b) @[MDU.scala 36:77]
    node _result_T_14 = mul(_result_T_12, _result_T_13) @[MDU.scala 36:66]
    node _result_T_15 = asUInt(_result_T_14) @[MDU.scala 36:85]
    node _result_T_16 = mux(_result_T_11, _result_T_15, UInt<1>("h0")) @[Mux.scala 101:16]
    node _result_T_17 = mux(_result_T_4, _result_T_10, _result_T_16) @[Mux.scala 101:16]
    node _result_T_18 = mux(_result_T_2, _result_T_3, _result_T_17) @[Mux.scala 101:16]
    result <= _result_T_18 @[MDU.scala 33:12]
    reg r_ready : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[MDU.scala 41:29]
    reg r_counter : UInt<6>, clock with :
      reset => (reset, UInt<6>("h20")) @[MDU.scala 42:29]
    reg r_dividend : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MDU.scala 43:29]
    reg r_quotient : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MDU.scala 44:29]
    io.output.valid <= UInt<1>("h0") @[MDU.scala 46:21]
    node _is_div_rem_u_T = eq(io.op, UInt<3>("h5")) @[MDU.scala 48:39]
    node _is_div_rem_u_T_1 = eq(io.op, UInt<3>("h7")) @[MDU.scala 48:57]
    node _is_div_rem_u_T_2 = or(_is_div_rem_u_T, _is_div_rem_u_T_1) @[MDU.scala 48:48]
    wire is_div_rem_u : UInt<1> @[MDU.scala 48:32]
    is_div_rem_u <= _is_div_rem_u_T_2 @[MDU.scala 48:32]
    node _is_div_rem_s_T = eq(io.op, UInt<3>("h4")) @[MDU.scala 49:39]
    node _is_div_rem_s_T_1 = eq(io.op, UInt<3>("h6")) @[MDU.scala 49:56]
    node _is_div_rem_s_T_2 = or(_is_div_rem_s_T, _is_div_rem_s_T_1) @[MDU.scala 49:47]
    wire is_div_rem_s : UInt<1> @[MDU.scala 49:32]
    is_div_rem_s <= _is_div_rem_s_T_2 @[MDU.scala 49:32]
    node _T = or(is_div_rem_s, is_div_rem_u) @[MDU.scala 50:23]
    when _T : @[MDU.scala 50:39]
      node _dividend_T = bits(io.src_a, 31, 31) @[MDU.scala 51:53]
      node _dividend_T_1 = and(is_div_rem_s, _dividend_T) @[MDU.scala 51:42]
      node _dividend_T_2 = sub(UInt<1>("h0"), io.src_a) @[MDU.scala 51:59]
      node _dividend_T_3 = tail(_dividend_T_2, 1) @[MDU.scala 51:59]
      node dividend = mux(_dividend_T_1, _dividend_T_3, io.src_a) @[MDU.scala 51:28]
      node _divisor_T = bits(io.src_b, 31, 31) @[MDU.scala 52:53]
      node _divisor_T_1 = and(is_div_rem_s, _divisor_T) @[MDU.scala 52:42]
      node _divisor_T_2 = sub(UInt<1>("h0"), io.src_b) @[MDU.scala 52:59]
      node _divisor_T_3 = tail(_divisor_T_2, 1) @[MDU.scala 52:59]
      node divisor = mux(_divisor_T_1, _divisor_T_3, io.src_b) @[MDU.scala 52:28]
      node _T_1 = eq(io.valid, UInt<1>("h1")) @[MDU.scala 53:23]
      when _T_1 : @[MDU.scala 53:32]
        r_ready <= UInt<1>("h0") @[MDU.scala 54:24]
        r_counter <= UInt<6>("h20") @[MDU.scala 55:24]
        r_dividend <= dividend @[MDU.scala 56:24]
        r_quotient <= UInt<1>("h0") @[MDU.scala 57:24]
      else :
        node _T_2 = neq(r_counter, UInt<1>("h0")) @[MDU.scala 58:30]
        when _T_2 : @[MDU.scala 58:38]
          node _T_3 = sub(r_counter, UInt<1>("h1")) @[MDU.scala 59:52]
          node _T_4 = tail(_T_3, 1) @[MDU.scala 59:52]
          node _T_5 = dshl(divisor, _T_4) @[MDU.scala 59:40]
          node _T_6 = geq(r_dividend, _T_5) @[MDU.scala 59:29]
          when _T_6 : @[MDU.scala 59:59]
            node _r_dividend_T = sub(r_counter, UInt<1>("h1")) @[MDU.scala 60:67]
            node _r_dividend_T_1 = tail(_r_dividend_T, 1) @[MDU.scala 60:67]
            node _r_dividend_T_2 = dshl(divisor, _r_dividend_T_1) @[MDU.scala 60:55]
            node _r_dividend_T_3 = sub(r_dividend, _r_dividend_T_2) @[MDU.scala 60:45]
            node _r_dividend_T_4 = tail(_r_dividend_T_3, 1) @[MDU.scala 60:45]
            r_dividend <= _r_dividend_T_4 @[MDU.scala 60:31]
            node _r_quotient_T = sub(r_counter, UInt<1>("h1")) @[MDU.scala 61:63]
            node _r_quotient_T_1 = tail(_r_quotient_T, 1) @[MDU.scala 61:63]
            node _r_quotient_T_2 = dshl(UInt<1>("h1"), _r_quotient_T_1) @[MDU.scala 61:51]
            node _r_quotient_T_3 = add(r_quotient, _r_quotient_T_2) @[MDU.scala 61:45]
            node _r_quotient_T_4 = tail(_r_quotient_T_3, 1) @[MDU.scala 61:45]
            r_quotient <= _r_quotient_T_4 @[MDU.scala 61:31]
          else :
            r_ready <= UInt<1>("h1") @[MDU.scala 63:25]
          node _r_counter_T = sub(r_counter, UInt<1>("h1")) @[MDU.scala 65:37]
          node _r_counter_T_1 = tail(_r_counter_T, 1) @[MDU.scala 65:37]
          r_counter <= _r_counter_T_1 @[MDU.scala 65:24]
          node _r_ready_T = eq(r_counter, UInt<1>("h1")) @[MDU.scala 66:38]
          r_ready <= _r_ready_T @[MDU.scala 66:24]
        else :
          io.output.valid <= UInt<1>("h1") @[MDU.scala 68:29]
    io.ready <= r_ready @[MDU.scala 72:18]
    node _T_7 = eq(io.op, UInt<1>("h0")) @[MDU.scala 73:16]
    when _T_7 : @[MDU.scala 73:24]
      node _io_output_bits_T = bits(result, 31, 0) @[MDU.scala 74:33]
      io.output.bits <= _io_output_bits_T @[MDU.scala 74:24]
      io.output.valid <= UInt<1>("h1") @[MDU.scala 75:25]
    else :
      node _T_8 = eq(io.op, UInt<1>("h1")) @[MDU.scala 76:22]
      node _T_9 = eq(io.op, UInt<2>("h3")) @[MDU.scala 76:40]
      node _T_10 = or(_T_8, _T_9) @[MDU.scala 76:31]
      node _T_11 = eq(io.op, UInt<2>("h2")) @[MDU.scala 76:59]
      node _T_12 = or(_T_10, _T_11) @[MDU.scala 76:50]
      when _T_12 : @[MDU.scala 76:70]
        node _io_output_bits_T_1 = bits(result, 63, 32) @[MDU.scala 77:33]
        io.output.bits <= _io_output_bits_T_1 @[MDU.scala 77:24]
        io.output.valid <= UInt<1>("h1") @[MDU.scala 78:25]
      else :
        node _T_13 = eq(io.op, UInt<3>("h4")) @[MDU.scala 79:22]
        when _T_13 : @[MDU.scala 79:30]
          node _io_output_bits_T_2 = bits(io.src_a, 31, 31) @[MDU.scala 80:39]
          node _io_output_bits_T_3 = bits(io.src_b, 31, 31) @[MDU.scala 80:56]
          node _io_output_bits_T_4 = neq(_io_output_bits_T_2, _io_output_bits_T_3) @[MDU.scala 80:44]
          node _io_output_bits_T_5 = orr(io.src_b) @[MDU.scala 80:72]
          node _io_output_bits_T_6 = and(_io_output_bits_T_4, _io_output_bits_T_5) @[MDU.scala 80:61]
          node _io_output_bits_T_7 = sub(UInt<1>("h0"), r_quotient) @[MDU.scala 80:76]
          node _io_output_bits_T_8 = tail(_io_output_bits_T_7, 1) @[MDU.scala 80:76]
          node _io_output_bits_T_9 = mux(_io_output_bits_T_6, _io_output_bits_T_8, r_quotient) @[MDU.scala 80:30]
          io.output.bits <= _io_output_bits_T_9 @[MDU.scala 80:24]
        else :
          node _T_14 = eq(io.op, UInt<3>("h5")) @[MDU.scala 81:22]
          when _T_14 : @[MDU.scala 81:31]
            io.output.bits <= r_quotient @[MDU.scala 82:24]
          else :
            node _T_15 = eq(io.op, UInt<3>("h6")) @[MDU.scala 83:22]
            when _T_15 : @[MDU.scala 83:30]
              node _io_output_bits_T_10 = bits(io.src_a, 31, 31) @[MDU.scala 84:39]
              node _io_output_bits_T_11 = sub(UInt<1>("h0"), r_dividend) @[MDU.scala 84:44]
              node _io_output_bits_T_12 = tail(_io_output_bits_T_11, 1) @[MDU.scala 84:44]
              node _io_output_bits_T_13 = mux(_io_output_bits_T_10, _io_output_bits_T_12, r_dividend) @[MDU.scala 84:30]
              io.output.bits <= _io_output_bits_T_13 @[MDU.scala 84:24]
            else :
              node _T_16 = eq(io.op, UInt<3>("h7")) @[MDU.scala 85:22]
              when _T_16 : @[MDU.scala 85:31]
                io.output.bits <= r_dividend @[MDU.scala 86:24]
              else :
                io.output.bits <= UInt<1>("h0") @[MDU.scala 88:24]


  module Execute :
    input clock : Clock
    input reset : Reset
    output io : { flip immediate : UInt<32>, flip readData1 : UInt<32>, flip readData2 : UInt<32>, flip pcAddress : UInt<32>, flip func7 : UInt<7>, flip func3 : UInt<3>, flip mem_result : UInt<32>, flip wb_result : UInt<32>, flip ex_mem_regWrite : UInt<1>, flip mem_wb_regWrite : UInt<1>, flip id_ex_ins : UInt<32>, flip ex_mem_ins : UInt<32>, flip mem_wb_ins : UInt<32>, flip ctl_aluSrc : UInt<1>, flip ctl_aluOp : UInt<2>, flip ctl_aluSrc1 : UInt<2>, writeData : UInt<32>, ALUresult : UInt<32>, stall : UInt<1>}

    inst alu of ALU @[Execute.scala 33:19]
    alu.clock <= clock
    alu.reset <= reset
    inst aluCtl of AluControl @[Execute.scala 34:22]
    aluCtl.clock <= clock
    aluCtl.reset <= reset
    inst ForwardingUnit of ForwardingUnit @[Execute.scala 35:18]
    ForwardingUnit.clock <= clock
    ForwardingUnit.reset <= reset
    ForwardingUnit.io.ex_regWrite <= io.ex_mem_regWrite @[Execute.scala 39:18]
    ForwardingUnit.io.mem_regWrite <= io.mem_wb_regWrite @[Execute.scala 40:19]
    node _T = bits(io.ex_mem_ins, 11, 7) @[Execute.scala 41:32]
    ForwardingUnit.io.ex_reg_rd <= _T @[Execute.scala 41:16]
    node _T_1 = bits(io.mem_wb_ins, 11, 7) @[Execute.scala 42:33]
    ForwardingUnit.io.mem_reg_rd <= _T_1 @[Execute.scala 42:17]
    node _T_2 = bits(io.id_ex_ins, 19, 15) @[Execute.scala 43:29]
    ForwardingUnit.io.reg_rs1 <= _T_2 @[Execute.scala 43:14]
    node _T_3 = bits(io.id_ex_ins, 24, 20) @[Execute.scala 44:29]
    ForwardingUnit.io.reg_rs2 <= _T_3 @[Execute.scala 44:14]
    node _inputMux1_T = eq(ForwardingUnit.io.forwardA, UInt<1>("h0")) @[Execute.scala 49:20]
    node _inputMux1_T_1 = eq(ForwardingUnit.io.forwardA, UInt<1>("h1")) @[Execute.scala 50:20]
    node _inputMux1_T_2 = eq(ForwardingUnit.io.forwardA, UInt<2>("h2")) @[Execute.scala 51:20]
    node _inputMux1_T_3 = mux(_inputMux1_T_2, io.wb_result, UInt<1>("h0")) @[Mux.scala 101:16]
    node _inputMux1_T_4 = mux(_inputMux1_T_1, io.mem_result, _inputMux1_T_3) @[Mux.scala 101:16]
    node inputMux1 = mux(_inputMux1_T, io.readData1, _inputMux1_T_4) @[Mux.scala 101:16]
    node _inputMux2_T = eq(ForwardingUnit.io.forwardB, UInt<1>("h0")) @[Execute.scala 57:20]
    node _inputMux2_T_1 = eq(ForwardingUnit.io.forwardB, UInt<1>("h1")) @[Execute.scala 58:20]
    node _inputMux2_T_2 = eq(ForwardingUnit.io.forwardB, UInt<2>("h2")) @[Execute.scala 59:20]
    node _inputMux2_T_3 = mux(_inputMux2_T_2, io.wb_result, UInt<1>("h0")) @[Mux.scala 101:16]
    node _inputMux2_T_4 = mux(_inputMux2_T_1, io.mem_result, _inputMux2_T_3) @[Mux.scala 101:16]
    node inputMux2 = mux(_inputMux2_T, io.readData2, _inputMux2_T_4) @[Mux.scala 101:16]
    node _aluIn1_T = eq(io.ctl_aluSrc1, UInt<1>("h1")) @[Execute.scala 66:23]
    node _aluIn1_T_1 = eq(io.ctl_aluSrc1, UInt<2>("h2")) @[Execute.scala 67:23]
    node _aluIn1_T_2 = mux(_aluIn1_T_1, UInt<1>("h0"), inputMux1) @[Mux.scala 101:16]
    node aluIn1 = mux(_aluIn1_T, io.pcAddress, _aluIn1_T_2) @[Mux.scala 101:16]
    node aluIn2 = mux(io.ctl_aluSrc, inputMux2, io.immediate) @[Execute.scala 70:19]
    aluCtl.io.f3 <= io.func3 @[Execute.scala 72:16]
    node _aluCtl_io_f7_T = bits(io.func7, 5, 5) @[Execute.scala 73:27]
    aluCtl.io.f7 <= _aluCtl_io_f7_T @[Execute.scala 73:16]
    aluCtl.io.aluOp <= io.ctl_aluOp @[Execute.scala 74:19]
    aluCtl.io.aluSrc <= io.ctl_aluSrc @[Execute.scala 75:20]
    alu.io.input1 <= aluIn1 @[Execute.scala 77:17]
    alu.io.input2 <= aluIn2 @[Execute.scala 78:17]
    alu.io.aluCtl <= aluCtl.io.out @[Execute.scala 79:17]
    io.stall <= UInt<1>("h0") @[Execute.scala 81:12]
    inst mdu of MDU @[Execute.scala 83:22]
    mdu.clock <= clock
    mdu.reset <= reset
    mdu.io.src_a <= aluIn1 @[Execute.scala 84:18]
    mdu.io.src_b <= aluIn2 @[Execute.scala 85:18]
    mdu.io.op <= io.func3 @[Execute.scala 86:18]
    reg src_a_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Execute.scala 90:28]
    reg src_b_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Execute.scala 91:28]
    reg op_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Execute.scala 92:28]
    reg div_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Execute.scala 93:28]
    reg f7_reg : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Execute.scala 94:28]
    reg counter : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Execute.scala 95:28]
    node _T_4 = eq(io.func7, UInt<1>("h1")) @[Execute.scala 97:19]
    node _T_5 = eq(io.func3, UInt<1>("h0")) @[Execute.scala 97:40]
    node _T_6 = eq(io.func3, UInt<1>("h1")) @[Execute.scala 97:60]
    node _T_7 = or(_T_5, _T_6) @[Execute.scala 97:48]
    node _T_8 = eq(io.func3, UInt<2>("h2")) @[Execute.scala 97:80]
    node _T_9 = or(_T_7, _T_8) @[Execute.scala 97:68]
    node _T_10 = eq(io.func3, UInt<2>("h3")) @[Execute.scala 97:100]
    node _T_11 = or(_T_9, _T_10) @[Execute.scala 97:88]
    node _T_12 = and(_T_4, _T_11) @[Execute.scala 97:27]
    when _T_12 : @[Execute.scala 97:109]
      mdu.io.valid <= UInt<1>("h1") @[Execute.scala 98:20]
    else :
      mdu.io.valid <= UInt<1>("h0") @[Execute.scala 100:20]
    node _T_13 = eq(io.func7, UInt<1>("h1")) @[Execute.scala 103:19]
    node _T_14 = not(div_en) @[Execute.scala 103:30]
    node _T_15 = and(_T_13, _T_14) @[Execute.scala 103:27]
    node _T_16 = eq(io.func3, UInt<3>("h4")) @[Execute.scala 103:51]
    node _T_17 = eq(io.func3, UInt<3>("h5")) @[Execute.scala 103:71]
    node _T_18 = or(_T_16, _T_17) @[Execute.scala 103:59]
    node _T_19 = eq(io.func3, UInt<3>("h6")) @[Execute.scala 103:91]
    node _T_20 = or(_T_18, _T_19) @[Execute.scala 103:79]
    node _T_21 = eq(io.func3, UInt<3>("h7")) @[Execute.scala 103:111]
    node _T_22 = or(_T_20, _T_21) @[Execute.scala 103:99]
    node _T_23 = and(_T_15, _T_22) @[Execute.scala 103:38]
    when _T_23 : @[Execute.scala 103:120]
      reg mdu_io_valid_REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), mdu_io_valid_REG) @[Execute.scala 104:30]
      mdu_io_valid_REG <= UInt<1>("h1") @[Execute.scala 104:30]
      mdu.io.valid <= mdu_io_valid_REG @[Execute.scala 104:20]
      div_en <= UInt<1>("h1") @[Execute.scala 105:14]
      src_a_reg <= aluIn1 @[Execute.scala 106:17]
      src_b_reg <= aluIn2 @[Execute.scala 107:17]
      op_reg <= io.func3 @[Execute.scala 108:14]
      f7_reg <= io.func7 @[Execute.scala 109:14]
      io.stall <= UInt<1>("h1") @[Execute.scala 110:16]
    when div_en : @[Execute.scala 114:17]
      node _T_24 = lt(counter, UInt<6>("h20")) @[Execute.scala 116:21]
      when _T_24 : @[Execute.scala 116:28]
        io.stall <= UInt<1>("h1") @[Execute.scala 117:18]
        mdu.io.src_a <= src_a_reg @[Execute.scala 118:22]
        mdu.io.src_b <= src_b_reg @[Execute.scala 119:22]
        mdu.io.op <= op_reg @[Execute.scala 120:22]
        node _counter_T = add(counter, UInt<1>("h1")) @[Execute.scala 122:28]
        node _counter_T_1 = tail(_counter_T, 1) @[Execute.scala 122:28]
        counter <= _counter_T_1 @[Execute.scala 122:17]
      else :
        mdu.io.valid <= UInt<1>("h0") @[Execute.scala 124:22]
        div_en <= UInt<1>("h0") @[Execute.scala 125:22]
        mdu.io.src_a <= src_a_reg @[Execute.scala 126:22]
        mdu.io.src_b <= src_b_reg @[Execute.scala 127:22]
        mdu.io.op <= op_reg @[Execute.scala 128:22]
        counter <= UInt<1>("h0") @[Execute.scala 129:17]
    node _T_25 = eq(f7_reg, UInt<1>("h1")) @[Execute.scala 133:27]
    node _T_26 = and(div_en, _T_25) @[Execute.scala 133:17]
    node _T_27 = and(_T_26, mdu.io.ready) @[Execute.scala 133:35]
    when _T_27 : @[Execute.scala 133:51]
      node _io_ALUresult_T = mux(mdu.io.output.valid, mdu.io.output.bits, UInt<1>("h0")) @[Execute.scala 134:26]
      io.ALUresult <= _io_ALUresult_T @[Execute.scala 134:20]
    else :
      node _T_28 = eq(io.func7, UInt<1>("h1")) @[Execute.scala 136:25]
      node _T_29 = and(_T_28, mdu.io.ready) @[Execute.scala 136:33]
      when _T_29 : @[Execute.scala 136:49]
        node _io_ALUresult_T_1 = mux(mdu.io.output.valid, mdu.io.output.bits, UInt<1>("h0")) @[Execute.scala 137:26]
        io.ALUresult <= _io_ALUresult_T_1 @[Execute.scala 137:20]
      else :
        io.ALUresult <= alu.io.result @[Execute.scala 139:29]
    io.writeData <= inputMux2 @[Execute.scala 147:16]

  module MemoryFetch :
    input clock : Clock
    input reset : Reset
    output io : { flip aluResultIn : UInt<32>, flip writeData : UInt<32>, flip writeEnable : UInt<1>, flip readEnable : UInt<1>, readData : UInt<32>, stall : UInt<1>, flip f3 : UInt<3>, dccmReq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip dccmRsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>}}}

    io.dccmRsp.ready <= UInt<1>("h1") @[MemoryFetch.scala 22:20]
    wire wdata : UInt<8>[4] @[MemoryFetch.scala 24:19]
    wire rdata : UInt<32> @[MemoryFetch.scala 25:19]
    reg offset : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[MemoryFetch.scala 26:23]
    reg funct3 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[MemoryFetch.scala 27:23]
    node offsetSW = bits(io.aluResultIn, 1, 0) @[MemoryFetch.scala 28:32]
    node _T = eq(io.dccmRsp.valid, UInt<1>("h0")) @[MemoryFetch.scala 30:8]
    when _T : @[MemoryFetch.scala 30:26]
      funct3 <= io.f3 @[MemoryFetch.scala 31:12]
      node _offset_T = bits(io.aluResultIn, 1, 0) @[MemoryFetch.scala 32:29]
      offset <= _offset_T @[MemoryFetch.scala 32:12]
    else :
      funct3 <= funct3 @[MemoryFetch.scala 34:12]
      offset <= offset @[MemoryFetch.scala 35:12]
    node _wdata_0_T = bits(io.writeData, 7, 0) @[MemoryFetch.scala 38:27]
    wdata[0] <= _wdata_0_T @[MemoryFetch.scala 38:12]
    node _wdata_1_T = bits(io.writeData, 15, 8) @[MemoryFetch.scala 39:27]
    wdata[1] <= _wdata_1_T @[MemoryFetch.scala 39:12]
    node _wdata_2_T = bits(io.writeData, 23, 16) @[MemoryFetch.scala 40:27]
    wdata[2] <= _wdata_2_T @[MemoryFetch.scala 40:12]
    node _wdata_3_T = bits(io.writeData, 31, 24) @[MemoryFetch.scala 41:27]
    wdata[3] <= _wdata_3_T @[MemoryFetch.scala 41:12]
    node _T_1 = eq(io.f3, UInt<1>("h0")) @[MemoryFetch.scala 44:32]
    node _T_2 = and(io.writeEnable, _T_1) @[MemoryFetch.scala 44:23]
    when _T_2 : @[MemoryFetch.scala 44:45]
      node _T_3 = eq(offsetSW, UInt<1>("h0")) @[MemoryFetch.scala 45:19]
      when _T_3 : @[MemoryFetch.scala 45:27]
        io.dccmReq.bits.activeByteLane <= UInt<1>("h1") @[MemoryFetch.scala 46:38]
      else :
        node _T_4 = eq(offsetSW, UInt<1>("h1")) @[MemoryFetch.scala 47:25]
        when _T_4 : @[MemoryFetch.scala 47:33]
          node _wdata_0_T_1 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 48:31]
          wdata[0] <= _wdata_0_T_1 @[MemoryFetch.scala 48:16]
          node _wdata_1_T_1 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 49:31]
          wdata[1] <= _wdata_1_T_1 @[MemoryFetch.scala 49:16]
          node _wdata_2_T_1 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 50:31]
          wdata[2] <= _wdata_2_T_1 @[MemoryFetch.scala 50:16]
          node _wdata_3_T_1 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 51:31]
          wdata[3] <= _wdata_3_T_1 @[MemoryFetch.scala 51:16]
          io.dccmReq.bits.activeByteLane <= UInt<2>("h2") @[MemoryFetch.scala 52:38]
        else :
          node _T_5 = eq(offsetSW, UInt<2>("h2")) @[MemoryFetch.scala 53:25]
          when _T_5 : @[MemoryFetch.scala 53:33]
            node _wdata_0_T_2 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 54:31]
            wdata[0] <= _wdata_0_T_2 @[MemoryFetch.scala 54:16]
            node _wdata_1_T_2 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 55:31]
            wdata[1] <= _wdata_1_T_2 @[MemoryFetch.scala 55:16]
            node _wdata_2_T_2 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 56:31]
            wdata[2] <= _wdata_2_T_2 @[MemoryFetch.scala 56:16]
            node _wdata_3_T_2 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 57:31]
            wdata[3] <= _wdata_3_T_2 @[MemoryFetch.scala 57:16]
            io.dccmReq.bits.activeByteLane <= UInt<3>("h4") @[MemoryFetch.scala 58:38]
          else :
            node _wdata_0_T_3 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 60:31]
            wdata[0] <= _wdata_0_T_3 @[MemoryFetch.scala 60:16]
            node _wdata_1_T_3 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 61:31]
            wdata[1] <= _wdata_1_T_3 @[MemoryFetch.scala 61:16]
            node _wdata_2_T_3 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 62:31]
            wdata[2] <= _wdata_2_T_3 @[MemoryFetch.scala 62:16]
            node _wdata_3_T_3 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 63:31]
            wdata[3] <= _wdata_3_T_3 @[MemoryFetch.scala 63:16]
            io.dccmReq.bits.activeByteLane <= UInt<4>("h8") @[MemoryFetch.scala 64:38]
    else :
      node _T_6 = eq(io.f3, UInt<1>("h1")) @[MemoryFetch.scala 68:39]
      node _T_7 = and(io.writeEnable, _T_6) @[MemoryFetch.scala 68:30]
      when _T_7 : @[MemoryFetch.scala 68:52]
        node _T_8 = eq(offsetSW, UInt<1>("h0")) @[MemoryFetch.scala 70:19]
        when _T_8 : @[MemoryFetch.scala 70:27]
          io.dccmReq.bits.activeByteLane <= UInt<2>("h3") @[MemoryFetch.scala 72:38]
        else :
          node _T_9 = eq(offsetSW, UInt<1>("h1")) @[MemoryFetch.scala 73:25]
          when _T_9 : @[MemoryFetch.scala 73:33]
            io.dccmReq.bits.activeByteLane <= UInt<3>("h6") @[MemoryFetch.scala 75:38]
            node _wdata_0_T_4 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 76:31]
            wdata[0] <= _wdata_0_T_4 @[MemoryFetch.scala 76:16]
            node _wdata_1_T_4 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 77:31]
            wdata[1] <= _wdata_1_T_4 @[MemoryFetch.scala 77:16]
            node _wdata_2_T_4 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 78:31]
            wdata[2] <= _wdata_2_T_4 @[MemoryFetch.scala 78:16]
            node _wdata_3_T_4 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 79:31]
            wdata[3] <= _wdata_3_T_4 @[MemoryFetch.scala 79:16]
          else :
            io.dccmReq.bits.activeByteLane <= UInt<4>("hc") @[MemoryFetch.scala 82:38]
            node _wdata_2_T_5 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 83:31]
            wdata[2] <= _wdata_2_T_5 @[MemoryFetch.scala 83:16]
            node _wdata_3_T_5 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 84:31]
            wdata[3] <= _wdata_3_T_5 @[MemoryFetch.scala 84:16]
            node _wdata_0_T_5 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 85:31]
            wdata[0] <= _wdata_0_T_5 @[MemoryFetch.scala 85:16]
            node _wdata_1_T_5 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 86:31]
            wdata[1] <= _wdata_1_T_5 @[MemoryFetch.scala 86:16]
      else :
        io.dccmReq.bits.activeByteLane <= UInt<4>("hf") @[MemoryFetch.scala 91:36]
    node io_dccmReq_bits_dataRequest_lo = cat(wdata[1], wdata[0]) @[MemoryFetch.scala 94:46]
    node io_dccmReq_bits_dataRequest_hi = cat(wdata[3], wdata[2]) @[MemoryFetch.scala 94:46]
    node _io_dccmReq_bits_dataRequest_T = cat(io_dccmReq_bits_dataRequest_hi, io_dccmReq_bits_dataRequest_lo) @[MemoryFetch.scala 94:46]
    io.dccmReq.bits.dataRequest <= _io_dccmReq_bits_dataRequest_T @[MemoryFetch.scala 94:31]
    node _io_dccmReq_bits_addrRequest_T = and(io.aluResultIn, UInt<13>("h1fff")) @[MemoryFetch.scala 95:50]
    node _io_dccmReq_bits_addrRequest_T_1 = shr(_io_dccmReq_bits_addrRequest_T, 2) @[MemoryFetch.scala 95:67]
    io.dccmReq.bits.addrRequest <= _io_dccmReq_bits_addrRequest_T_1 @[MemoryFetch.scala 95:31]
    io.dccmReq.bits.isWrite <= io.writeEnable @[MemoryFetch.scala 96:27]
    node _io_dccmReq_valid_T = or(io.writeEnable, io.readEnable) @[MemoryFetch.scala 97:42]
    node _io_dccmReq_valid_T_1 = mux(_io_dccmReq_valid_T, UInt<1>("h1"), UInt<1>("h0")) @[MemoryFetch.scala 97:26]
    io.dccmReq.valid <= _io_dccmReq_valid_T_1 @[MemoryFetch.scala 97:20]
    node _io_stall_T = or(io.writeEnable, io.readEnable) @[MemoryFetch.scala 99:31]
    node _io_stall_T_1 = eq(io.dccmRsp.valid, UInt<1>("h0")) @[MemoryFetch.scala 99:52]
    node _io_stall_T_2 = and(_io_stall_T, _io_stall_T_1) @[MemoryFetch.scala 99:49]
    io.stall <= _io_stall_T_2 @[MemoryFetch.scala 99:12]
    wire _rdata_WIRE : UInt<32> @[MemoryFetch.scala 101:15]
    _rdata_WIRE is invalid @[MemoryFetch.scala 101:15]
    node _rdata_T = mux(io.dccmRsp.valid, io.dccmRsp.bits.dataResponse, _rdata_WIRE) @[MemoryFetch.scala 101:15]
    rdata <= _rdata_T @[MemoryFetch.scala 101:9]
    when io.readEnable : @[MemoryFetch.scala 104:23]
      node _T_10 = eq(funct3, UInt<2>("h2")) @[MemoryFetch.scala 105:17]
      when _T_10 : @[MemoryFetch.scala 105:31]
        io.readData <= rdata @[MemoryFetch.scala 107:19]
      else :
        node _T_11 = eq(funct3, UInt<1>("h0")) @[MemoryFetch.scala 109:24]
        when _T_11 : @[MemoryFetch.scala 109:38]
          node _T_12 = eq(offset, UInt<1>("h0")) @[MemoryFetch.scala 111:21]
          when _T_12 : @[MemoryFetch.scala 111:34]
            node _io_readData_T = bits(rdata, 7, 7) @[MemoryFetch.scala 113:43]
            node _io_readData_T_1 = bits(_io_readData_T, 0, 0) @[Bitwise.scala 77:15]
            node _io_readData_T_2 = mux(_io_readData_T_1, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
            node _io_readData_T_3 = bits(rdata, 7, 0) @[MemoryFetch.scala 113:53]
            node _io_readData_T_4 = cat(_io_readData_T_2, _io_readData_T_3) @[Cat.scala 33:92]
            io.readData <= _io_readData_T_4 @[MemoryFetch.scala 113:23]
          else :
            node _T_13 = eq(offset, UInt<1>("h1")) @[MemoryFetch.scala 114:28]
            when _T_13 : @[MemoryFetch.scala 114:41]
              node _io_readData_T_5 = bits(rdata, 15, 15) @[MemoryFetch.scala 116:44]
              node _io_readData_T_6 = bits(_io_readData_T_5, 0, 0) @[Bitwise.scala 77:15]
              node _io_readData_T_7 = mux(_io_readData_T_6, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
              node _io_readData_T_8 = bits(rdata, 15, 8) @[MemoryFetch.scala 116:55]
              node _io_readData_T_9 = cat(_io_readData_T_7, _io_readData_T_8) @[Cat.scala 33:92]
              io.readData <= _io_readData_T_9 @[MemoryFetch.scala 116:23]
            else :
              node _T_14 = eq(offset, UInt<2>("h2")) @[MemoryFetch.scala 117:28]
              when _T_14 : @[MemoryFetch.scala 117:41]
                node _io_readData_T_10 = bits(rdata, 23, 23) @[MemoryFetch.scala 119:44]
                node _io_readData_T_11 = bits(_io_readData_T_10, 0, 0) @[Bitwise.scala 77:15]
                node _io_readData_T_12 = mux(_io_readData_T_11, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                node _io_readData_T_13 = bits(rdata, 23, 16) @[MemoryFetch.scala 119:55]
                node _io_readData_T_14 = cat(_io_readData_T_12, _io_readData_T_13) @[Cat.scala 33:92]
                io.readData <= _io_readData_T_14 @[MemoryFetch.scala 119:23]
              else :
                node _T_15 = eq(offset, UInt<2>("h3")) @[MemoryFetch.scala 120:28]
                when _T_15 : @[MemoryFetch.scala 120:41]
                  node _io_readData_T_15 = bits(rdata, 31, 31) @[MemoryFetch.scala 122:44]
                  node _io_readData_T_16 = bits(_io_readData_T_15, 0, 0) @[Bitwise.scala 77:15]
                  node _io_readData_T_17 = mux(_io_readData_T_16, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                  node _io_readData_T_18 = bits(rdata, 31, 24) @[MemoryFetch.scala 122:55]
                  node _io_readData_T_19 = cat(_io_readData_T_17, _io_readData_T_18) @[Cat.scala 33:92]
                  io.readData <= _io_readData_T_19 @[MemoryFetch.scala 122:23]
                else :
                  io.readData is invalid @[MemoryFetch.scala 125:23]
        else :
          node _T_16 = eq(funct3, UInt<3>("h4")) @[MemoryFetch.scala 128:24]
          when _T_16 : @[MemoryFetch.scala 128:38]
            node _T_17 = eq(offset, UInt<1>("h0")) @[MemoryFetch.scala 130:21]
            when _T_17 : @[MemoryFetch.scala 130:34]
              node _io_readData_T_20 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
              node _io_readData_T_21 = bits(rdata, 7, 0) @[MemoryFetch.scala 132:50]
              node _io_readData_T_22 = cat(_io_readData_T_20, _io_readData_T_21) @[Cat.scala 33:92]
              io.readData <= _io_readData_T_22 @[MemoryFetch.scala 132:23]
            else :
              node _T_18 = eq(offset, UInt<1>("h1")) @[MemoryFetch.scala 133:27]
              when _T_18 : @[MemoryFetch.scala 133:40]
                node _io_readData_T_23 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                node _io_readData_T_24 = bits(rdata, 15, 8) @[MemoryFetch.scala 135:50]
                node _io_readData_T_25 = cat(_io_readData_T_23, _io_readData_T_24) @[Cat.scala 33:92]
                io.readData <= _io_readData_T_25 @[MemoryFetch.scala 135:23]
              else :
                node _T_19 = eq(offset, UInt<2>("h2")) @[MemoryFetch.scala 136:27]
                when _T_19 : @[MemoryFetch.scala 136:40]
                  node _io_readData_T_26 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                  node _io_readData_T_27 = bits(rdata, 23, 16) @[MemoryFetch.scala 138:50]
                  node _io_readData_T_28 = cat(_io_readData_T_26, _io_readData_T_27) @[Cat.scala 33:92]
                  io.readData <= _io_readData_T_28 @[MemoryFetch.scala 138:23]
                else :
                  node _T_20 = eq(offset, UInt<2>("h3")) @[MemoryFetch.scala 139:27]
                  when _T_20 : @[MemoryFetch.scala 139:40]
                    node _io_readData_T_29 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                    node _io_readData_T_30 = bits(rdata, 31, 24) @[MemoryFetch.scala 141:50]
                    node _io_readData_T_31 = cat(_io_readData_T_29, _io_readData_T_30) @[Cat.scala 33:92]
                    io.readData <= _io_readData_T_31 @[MemoryFetch.scala 141:23]
                  else :
                    io.readData is invalid @[MemoryFetch.scala 144:23]
          else :
            node _T_21 = eq(funct3, UInt<3>("h5")) @[MemoryFetch.scala 147:24]
            when _T_21 : @[MemoryFetch.scala 147:38]
              node _T_22 = eq(offset, UInt<1>("h0")) @[MemoryFetch.scala 149:21]
              when _T_22 : @[MemoryFetch.scala 149:34]
                node _io_readData_T_32 = mux(UInt<1>("h0"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                node _io_readData_T_33 = bits(rdata, 15, 0) @[MemoryFetch.scala 151:49]
                node _io_readData_T_34 = cat(_io_readData_T_32, _io_readData_T_33) @[Cat.scala 33:92]
                io.readData <= _io_readData_T_34 @[MemoryFetch.scala 151:23]
              else :
                node _T_23 = eq(offset, UInt<1>("h1")) @[MemoryFetch.scala 152:28]
                when _T_23 : @[MemoryFetch.scala 152:41]
                  node _io_readData_T_35 = mux(UInt<1>("h0"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                  node _io_readData_T_36 = bits(rdata, 23, 8) @[MemoryFetch.scala 154:49]
                  node _io_readData_T_37 = cat(_io_readData_T_35, _io_readData_T_36) @[Cat.scala 33:92]
                  io.readData <= _io_readData_T_37 @[MemoryFetch.scala 154:23]
                else :
                  node _T_24 = eq(offset, UInt<2>("h2")) @[MemoryFetch.scala 155:28]
                  when _T_24 : @[MemoryFetch.scala 155:41]
                    node _io_readData_T_38 = mux(UInt<1>("h0"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                    node _io_readData_T_39 = bits(rdata, 31, 16) @[MemoryFetch.scala 157:49]
                    node _io_readData_T_40 = cat(_io_readData_T_38, _io_readData_T_39) @[Cat.scala 33:92]
                    io.readData <= _io_readData_T_40 @[MemoryFetch.scala 157:23]
                  else :
                    io.readData is invalid @[MemoryFetch.scala 160:23]
            else :
              node _T_25 = eq(funct3, UInt<1>("h1")) @[MemoryFetch.scala 163:24]
              when _T_25 : @[MemoryFetch.scala 163:38]
                node _T_26 = eq(offset, UInt<1>("h0")) @[MemoryFetch.scala 165:21]
                when _T_26 : @[MemoryFetch.scala 165:34]
                  node _io_readData_T_41 = bits(rdata, 15, 15) @[MemoryFetch.scala 167:44]
                  node _io_readData_T_42 = bits(_io_readData_T_41, 0, 0) @[Bitwise.scala 77:15]
                  node _io_readData_T_43 = mux(_io_readData_T_42, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                  node _io_readData_T_44 = bits(rdata, 15, 0) @[MemoryFetch.scala 167:55]
                  node _io_readData_T_45 = cat(_io_readData_T_43, _io_readData_T_44) @[Cat.scala 33:92]
                  io.readData <= _io_readData_T_45 @[MemoryFetch.scala 167:23]
                else :
                  node _T_27 = eq(offset, UInt<1>("h1")) @[MemoryFetch.scala 168:28]
                  when _T_27 : @[MemoryFetch.scala 168:41]
                    node _io_readData_T_46 = bits(rdata, 23, 23) @[MemoryFetch.scala 170:44]
                    node _io_readData_T_47 = bits(_io_readData_T_46, 0, 0) @[Bitwise.scala 77:15]
                    node _io_readData_T_48 = mux(_io_readData_T_47, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                    node _io_readData_T_49 = bits(rdata, 23, 8) @[MemoryFetch.scala 170:55]
                    node _io_readData_T_50 = cat(_io_readData_T_48, _io_readData_T_49) @[Cat.scala 33:92]
                    io.readData <= _io_readData_T_50 @[MemoryFetch.scala 170:23]
                  else :
                    node _T_28 = eq(offset, UInt<2>("h2")) @[MemoryFetch.scala 171:28]
                    when _T_28 : @[MemoryFetch.scala 171:41]
                      node _io_readData_T_51 = bits(rdata, 31, 31) @[MemoryFetch.scala 173:44]
                      node _io_readData_T_52 = bits(_io_readData_T_51, 0, 0) @[Bitwise.scala 77:15]
                      node _io_readData_T_53 = mux(_io_readData_T_52, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                      node _io_readData_T_54 = bits(rdata, 31, 16) @[MemoryFetch.scala 173:55]
                      node _io_readData_T_55 = cat(_io_readData_T_53, _io_readData_T_54) @[Cat.scala 33:92]
                      io.readData <= _io_readData_T_55 @[MemoryFetch.scala 173:23]
                    else :
                      io.readData is invalid @[MemoryFetch.scala 176:23]
              else :
                io.readData is invalid @[MemoryFetch.scala 181:19]
    else :
      io.readData is invalid @[MemoryFetch.scala 184:17]
    when io.writeEnable : @[MemoryFetch.scala 188:23]
      node _T_29 = asUInt(reset) @[MemoryFetch.scala 189:11]
      node _T_30 = eq(_T_29, UInt<1>("h0")) @[MemoryFetch.scala 189:11]
      when _T_30 : @[MemoryFetch.scala 189:11]
        printf(clock, UInt<1>("h1"), "%x\n", io.writeData) : printf @[MemoryFetch.scala 189:11]


  module PC :
    input clock : Clock
    input reset : Reset
    output io : { flip in : SInt<32>, flip halt : UInt<1>, out : SInt<32>, pc4 : SInt<32>, pc2 : SInt<32>}

    reg pc_reg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("hfffffffc"))) @[PC.scala 13:23]
    pc_reg <= io.in @[PC.scala 14:10]
    io.out <= pc_reg @[PC.scala 15:10]
    node _io_pc4_T = add(pc_reg, asSInt(UInt<4>("h4"))) @[PC.scala 16:41]
    node _io_pc4_T_1 = tail(_io_pc4_T, 1) @[PC.scala 16:41]
    node _io_pc4_T_2 = asSInt(_io_pc4_T_1) @[PC.scala 16:41]
    node _io_pc4_T_3 = mux(io.halt, pc_reg, _io_pc4_T_2) @[PC.scala 16:16]
    io.pc4 <= _io_pc4_T_3 @[PC.scala 16:10]
    node _io_pc2_T = add(pc_reg, asSInt(UInt<3>("h2"))) @[PC.scala 17:41]
    node _io_pc2_T_1 = tail(_io_pc2_T, 1) @[PC.scala 17:41]
    node _io_pc2_T_2 = asSInt(_io_pc2_T_1) @[PC.scala 17:41]
    node _io_pc2_T_3 = mux(io.halt, pc_reg, _io_pc2_T_2) @[PC.scala 17:16]
    io.pc2 <= _io_pc2_T_3 @[PC.scala 17:10]

  module Core :
    input clock : Clock
    input reset : Reset
    output io : { pin : UInt<32>, flip stall : UInt<1>, dmemReq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip dmemRsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>}}, imemReq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip imemRsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>}}, fcsr_o_data : UInt<32>}

    reg if_reg_pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 34:26]
    reg if_reg_ins : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 35:27]
    reg id_reg_pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 38:26]
    reg id_reg_rd1 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 39:27]
    reg id_reg_rd2 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 40:27]
    reg id_reg_imm : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 41:27]
    reg id_reg_wra : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Core.scala 42:27]
    reg id_reg_f7 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Core.scala 43:26]
    reg id_reg_f3 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Core.scala 44:26]
    reg id_reg_ins : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 45:27]
    reg id_reg_ctl_aluSrc : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 46:34]
    reg id_reg_ctl_aluSrc1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Core.scala 47:35]
    reg id_reg_ctl_memToReg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Core.scala 48:36]
    reg id_reg_ctl_regWrite : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 49:36]
    reg id_reg_ctl_memRead : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 50:35]
    reg id_reg_ctl_memWrite : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 51:36]
    reg id_reg_ctl_branch : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 52:34]
    reg id_reg_ctl_aluOp : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Core.scala 53:33]
    reg id_reg_ctl_jump : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Core.scala 54:32]
    reg id_reg_is_csr : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 55:30]
    reg id_reg_csr_data : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 56:32]
    reg ex_reg_branch : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 59:30]
    reg ex_reg_zero : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 60:28]
    reg ex_reg_result : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 61:30]
    reg ex_reg_wd : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 62:26]
    reg ex_reg_wra : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Core.scala 63:27]
    reg ex_reg_ins : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 64:27]
    reg ex_reg_ctl_memToReg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Core.scala 65:36]
    reg ex_reg_ctl_regWrite : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 66:36]
    reg ex_reg_ctl_memRead : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 67:35]
    reg ex_reg_ctl_memWrite : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 68:36]
    reg ex_reg_ctl_branch_taken : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 69:40]
    reg ex_reg_pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 70:26]
    reg ex_reg_is_csr : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 71:30]
    reg ex_reg_csr_data : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 72:32]
    reg mem_reg_rd : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 75:27]
    reg mem_reg_ins : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 76:28]
    reg mem_reg_result : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 77:31]
    reg mem_reg_branch : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 78:31]
    reg mem_reg_wra : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Core.scala 79:28]
    reg mem_reg_ctl_memToReg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Core.scala 80:37]
    reg mem_reg_ctl_regWrite : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 81:37]
    reg mem_reg_pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 82:27]
    reg mem_reg_is_csr : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 83:31]
    reg mem_reg_csr_data : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 84:33]
    inst InstructionFetch of InstructionFetch @[Core.scala 87:18]
    InstructionFetch.clock <= clock
    InstructionFetch.reset <= reset
    inst InstructionDecode of InstructionDecode @[Core.scala 88:18]
    InstructionDecode.clock <= clock
    InstructionDecode.reset <= reset
    inst Execute of Execute @[Core.scala 89:18]
    Execute.clock <= clock
    Execute.reset <= reset
    inst MEM of MemoryFetch @[Core.scala 90:19]
    MEM.clock <= clock
    MEM.reset <= reset
    io.fcsr_o_data <= InstructionDecode.io.fscr_o_data @[Core.scala 92:18]
    inst pc of PC @[Core.scala 98:18]
    pc.clock <= clock
    pc.reset <= reset
    io.imemReq.bits <= InstructionFetch.io.coreInstrReq.bits @[Core.scala 100:14]
    io.imemReq.valid <= InstructionFetch.io.coreInstrReq.valid @[Core.scala 100:14]
    InstructionFetch.io.coreInstrReq.ready <= io.imemReq.ready @[Core.scala 100:14]
    InstructionFetch.io.coreInstrResp <= io.imemRsp @[Core.scala 101:20]
    wire instruction : UInt<32> @[Core.scala 103:25]
    wire ral_halt_o : UInt<1> @[Core.scala 104:29]
    ral_halt_o <= UInt<1>("h0") @[Core.scala 104:29]
    wire is_comp : UInt<1> @[Core.scala 105:29]
    is_comp <= UInt<1>("h0") @[Core.scala 105:29]
    node _T = asUInt(pc.io.in) @[Core.scala 141:34]
    InstructionFetch.io.address <= _T @[Core.scala 141:16]
    instruction <= InstructionFetch.io.instruction @[Core.scala 142:17]
    node func3 = bits(instruction, 14, 12) @[Core.scala 146:26]
    wire func7 : UInt<6> @[Core.scala 147:19]
    node _T_1 = bits(instruction, 6, 0) @[Core.scala 148:19]
    node _T_2 = eq(_T_1, UInt<6>("h33")) @[Core.scala 148:25]
    when _T_2 : @[Core.scala 148:42]
      node _func7_T = bits(instruction, 31, 25) @[Core.scala 149:25]
      func7 <= _func7_T @[Core.scala 149:11]
    else :
      func7 <= UInt<1>("h0") @[Core.scala 151:11]
    node _IF_stall_T = eq(func7, UInt<1>("h1")) @[Core.scala 154:24]
    node _IF_stall_T_1 = eq(func3, UInt<3>("h4")) @[Core.scala 154:42]
    node _IF_stall_T_2 = eq(func3, UInt<3>("h5")) @[Core.scala 154:59]
    node _IF_stall_T_3 = or(_IF_stall_T_1, _IF_stall_T_2) @[Core.scala 154:50]
    node _IF_stall_T_4 = eq(func3, UInt<3>("h6")) @[Core.scala 154:76]
    node _IF_stall_T_5 = or(_IF_stall_T_3, _IF_stall_T_4) @[Core.scala 154:67]
    node _IF_stall_T_6 = eq(func3, UInt<3>("h7")) @[Core.scala 154:93]
    node _IF_stall_T_7 = or(_IF_stall_T_5, _IF_stall_T_6) @[Core.scala 154:84]
    node IF_stall = and(_IF_stall_T, _IF_stall_T_7) @[Core.scala 154:32]
    node _T_3 = or(io.stall, Execute.io.stall) @[Core.scala 156:24]
    node _T_4 = or(_T_3, InstructionDecode.io.stall) @[Core.scala 156:36]
    node _T_5 = or(_T_4, IF_stall) @[Core.scala 156:48]
    InstructionFetch.io.stall <= _T_5 @[Core.scala 156:12]
    node _pc_io_halt_T = or(Execute.io.stall, InstructionDecode.io.stall) @[Core.scala 159:32]
    node _pc_io_halt_T_1 = or(_pc_io_halt_T, IF_stall) @[Core.scala 159:44]
    node _pc_io_halt_T_2 = not(io.imemReq.valid) @[Core.scala 159:59]
    node _pc_io_halt_T_3 = or(_pc_io_halt_T_1, _pc_io_halt_T_2) @[Core.scala 159:56]
    node _pc_io_halt_T_4 = or(_pc_io_halt_T_3, ral_halt_o) @[Core.scala 159:78]
    node _pc_io_halt_T_5 = mux(_pc_io_halt_T_4, UInt<1>("h1"), UInt<1>("h0")) @[Core.scala 159:20]
    pc.io.halt <= _pc_io_halt_T_5 @[Core.scala 159:14]
    node _npc_T = asSInt(InstructionDecode.io.pcPlusOffset) @[Core.scala 160:69]
    node _npc_T_1 = mux(is_comp, pc.io.pc2, pc.io.pc4) @[Core.scala 160:76]
    node _npc_T_2 = mux(InstructionDecode.io.pcSrc, _npc_T, _npc_T_1) @[Core.scala 160:36]
    node npc = mux(InstructionDecode.io.hdu_pcWrite, _npc_T_2, pc.io.out) @[Core.scala 160:16]
    pc.io.in <= npc @[Core.scala 161:12]
    when InstructionDecode.io.hdu_if_reg_write : @[Core.scala 163:29]
      node _if_reg_pc_T = asUInt(pc.io.out) @[Core.scala 164:34]
      if_reg_pc <= _if_reg_pc_T @[Core.scala 164:15]
      if_reg_ins <= instruction @[Core.scala 165:16]
    when InstructionDecode.io.ifid_flush : @[Core.scala 167:23]
      if_reg_ins <= UInt<1>("h0") @[Core.scala 168:16]
    id_reg_rd1 <= InstructionDecode.io.readData1 @[Core.scala 176:14]
    id_reg_rd2 <= InstructionDecode.io.readData2 @[Core.scala 177:14]
    id_reg_imm <= InstructionDecode.io.immediate @[Core.scala 178:14]
    id_reg_wra <= InstructionDecode.io.writeRegAddress @[Core.scala 179:14]
    id_reg_f3 <= InstructionDecode.io.func3 @[Core.scala 180:13]
    id_reg_f7 <= InstructionDecode.io.func7 @[Core.scala 181:13]
    id_reg_ins <= if_reg_ins @[Core.scala 182:14]
    id_reg_pc <= if_reg_pc @[Core.scala 183:13]
    id_reg_ctl_aluSrc <= InstructionDecode.io.ctl_aluSrc @[Core.scala 184:21]
    id_reg_ctl_memToReg <= InstructionDecode.io.ctl_memToReg @[Core.scala 185:23]
    id_reg_ctl_regWrite <= InstructionDecode.io.ctl_regWrite @[Core.scala 186:23]
    id_reg_ctl_memRead <= InstructionDecode.io.ctl_memRead @[Core.scala 187:22]
    id_reg_ctl_memWrite <= InstructionDecode.io.ctl_memWrite @[Core.scala 188:23]
    id_reg_ctl_branch <= InstructionDecode.io.ctl_branch @[Core.scala 189:21]
    id_reg_ctl_aluOp <= InstructionDecode.io.ctl_aluOp @[Core.scala 190:20]
    id_reg_ctl_jump <= InstructionDecode.io.ctl_jump @[Core.scala 191:19]
    id_reg_ctl_aluSrc1 <= InstructionDecode.io.ctl_aluSrc1 @[Core.scala 192:22]
    id_reg_is_csr <= InstructionDecode.io.is_csr @[Core.scala 193:17]
    id_reg_csr_data <= InstructionDecode.io.csr_o_data @[Core.scala 194:19]
    InstructionDecode.io.id_instruction <= if_reg_ins @[Core.scala 196:21]
    InstructionDecode.io.pcAddress <= if_reg_pc @[Core.scala 197:16]
    InstructionDecode.io.dmem_resp_valid <= io.dmemRsp.valid @[Core.scala 198:22]
    InstructionDecode.io.ex_ins <= id_reg_ins @[Core.scala 201:13]
    InstructionDecode.io.ex_mem_ins <= ex_reg_ins @[Core.scala 202:17]
    InstructionDecode.io.mem_wb_ins <= mem_reg_ins @[Core.scala 203:17]
    InstructionDecode.io.ex_mem_result <= ex_reg_result @[Core.scala 204:20]
    InstructionDecode.io.csr_i_misa is invalid @[Core.scala 206:20]
    InstructionDecode.io.csr_i_mhartid is invalid @[Core.scala 207:20]
    InstructionDecode.io.id_ex_regWr <= id_reg_ctl_regWrite @[Core.scala 208:18]
    InstructionDecode.io.ex_mem_regWr <= ex_reg_ctl_regWrite @[Core.scala 209:19]
    Execute.io.immediate <= id_reg_imm @[Core.scala 219:16]
    Execute.io.readData1 <= id_reg_rd1 @[Core.scala 220:16]
    Execute.io.readData2 <= id_reg_rd2 @[Core.scala 221:16]
    Execute.io.pcAddress <= id_reg_pc @[Core.scala 222:16]
    Execute.io.func3 <= id_reg_f3 @[Core.scala 223:12]
    Execute.io.func7 <= id_reg_f7 @[Core.scala 224:12]
    Execute.io.ctl_aluSrc <= id_reg_ctl_aluSrc @[Core.scala 225:17]
    Execute.io.ctl_aluOp <= id_reg_ctl_aluOp @[Core.scala 226:16]
    Execute.io.ctl_aluSrc1 <= id_reg_ctl_aluSrc1 @[Core.scala 227:18]
    ex_reg_pc <= id_reg_pc @[Core.scala 230:13]
    ex_reg_wra <= id_reg_wra @[Core.scala 231:14]
    ex_reg_ins <= id_reg_ins @[Core.scala 232:14]
    ex_reg_ctl_memToReg <= id_reg_ctl_memToReg @[Core.scala 233:23]
    ex_reg_ctl_regWrite <= id_reg_ctl_regWrite @[Core.scala 234:23]
    ex_reg_is_csr <= id_reg_is_csr @[Core.scala 235:17]
    ex_reg_csr_data <= id_reg_csr_data @[Core.scala 236:19]
    InstructionDecode.io.id_ex_mem_read <= id_reg_ctl_memRead @[Core.scala 239:21]
    InstructionDecode.io.ex_mem_mem_read <= ex_reg_ctl_memRead @[Core.scala 240:22]
    Execute.io.id_ex_ins <= id_reg_ins @[Core.scala 244:16]
    Execute.io.ex_mem_ins <= ex_reg_ins @[Core.scala 245:17]
    Execute.io.mem_wb_ins <= mem_reg_ins @[Core.scala 246:17]
    node _T_6 = bits(id_reg_ins, 11, 7) @[Core.scala 247:28]
    InstructionDecode.io.id_ex_rd <= _T_6 @[Core.scala 247:15]
    node _T_7 = bits(id_reg_ins, 6, 0) @[Core.scala 248:36]
    node _T_8 = eq(_T_7, UInt<7>("h63")) @[Core.scala 248:42]
    node _T_9 = mux(_T_8, UInt<1>("h1"), UInt<1>("h0")) @[Core.scala 248:25]
    InstructionDecode.io.id_ex_branch <= _T_9 @[Core.scala 248:19]
    node _T_10 = bits(ex_reg_ins, 11, 7) @[Core.scala 249:29]
    InstructionDecode.io.ex_mem_rd <= _T_10 @[Core.scala 249:16]
    InstructionDecode.io.ex_result <= Execute.io.ALUresult @[Core.scala 250:16]
    InstructionDecode.io.csr_Ex <= id_reg_is_csr @[Core.scala 251:13]
    InstructionDecode.io.csr_Ex_data <= id_reg_csr_data @[Core.scala 252:18]
    when Execute.io.stall : @[Core.scala 254:17]
      id_reg_wra <= id_reg_wra @[Core.scala 255:16]
      id_reg_ctl_regWrite <= id_reg_ctl_regWrite @[Core.scala 256:25]
    io.dmemReq.bits <= MEM.io.dccmReq.bits @[Core.scala 263:14]
    io.dmemReq.valid <= MEM.io.dccmReq.valid @[Core.scala 263:14]
    MEM.io.dccmReq.ready <= io.dmemReq.ready @[Core.scala 263:14]
    MEM.io.dccmRsp <= io.dmemRsp @[Core.scala 264:18]
    mem_reg_rd <= MEM.io.readData @[Core.scala 285:16]
    mem_reg_result <= ex_reg_result @[Core.scala 286:20]
    mem_reg_ctl_regWrite <= ex_reg_ctl_regWrite @[Core.scala 288:26]
    mem_reg_ins <= ex_reg_ins @[Core.scala 289:17]
    mem_reg_pc <= ex_reg_pc @[Core.scala 290:16]
    mem_reg_wra <= ex_reg_wra @[Core.scala 291:17]
    ex_reg_ctl_memRead <= id_reg_ctl_memRead @[Core.scala 292:24]
    ex_reg_ctl_memWrite <= id_reg_ctl_memWrite @[Core.scala 293:25]
    ex_reg_wd <= Execute.io.writeData @[Core.scala 294:15]
    ex_reg_result <= Execute.io.ALUresult @[Core.scala 295:19]
    mem_reg_wra <= ex_reg_wra @[Core.scala 297:15]
    mem_reg_ctl_memToReg <= ex_reg_ctl_memToReg @[Core.scala 298:24]
    mem_reg_is_csr <= ex_reg_is_csr @[Core.scala 299:18]
    mem_reg_csr_data <= ex_reg_csr_data @[Core.scala 300:20]
    Execute.io.ex_mem_regWrite <= ex_reg_ctl_regWrite @[Core.scala 301:22]
    MEM.io.aluResultIn <= ex_reg_result @[Core.scala 302:22]
    MEM.io.writeData <= ex_reg_wd @[Core.scala 303:20]
    MEM.io.readEnable <= ex_reg_ctl_memRead @[Core.scala 304:21]
    MEM.io.writeEnable <= ex_reg_ctl_memWrite @[Core.scala 305:22]
    node _MEM_io_f3_T = bits(ex_reg_ins, 14, 12) @[Core.scala 306:26]
    MEM.io.f3 <= _MEM_io_f3_T @[Core.scala 306:13]
    Execute.io.mem_result <= ex_reg_result @[Core.scala 307:17]
    InstructionDecode.io.csr_Mem <= ex_reg_is_csr @[Core.scala 308:14]
    InstructionDecode.io.csr_Mem_data <= ex_reg_csr_data @[Core.scala 309:19]
    wire wb_data : UInt<32> @[Core.scala 315:21]
    wire wb_addr : UInt<5> @[Core.scala 316:21]
    node _T_11 = eq(mem_reg_ctl_memToReg, UInt<1>("h1")) @[Core.scala 318:29]
    when _T_11 : @[Core.scala 318:38]
      wb_data <= MEM.io.readData @[Core.scala 319:13]
      wb_addr <= mem_reg_wra @[Core.scala 320:13]
    else :
      node _T_12 = eq(mem_reg_ctl_memToReg, UInt<2>("h2")) @[Core.scala 321:35]
      when _T_12 : @[Core.scala 321:44]
        node _wb_data_T = add(mem_reg_pc, UInt<3>("h4")) @[Core.scala 322:28]
        node _wb_data_T_1 = tail(_wb_data_T, 1) @[Core.scala 322:28]
        wb_data <= _wb_data_T_1 @[Core.scala 322:15]
        wb_addr <= mem_reg_wra @[Core.scala 323:15]
      else :
        wb_data <= mem_reg_result @[Core.scala 326:15]
        wb_addr <= mem_reg_wra @[Core.scala 327:15]
    InstructionDecode.io.mem_wb_result <= wb_data @[Core.scala 330:20]
    InstructionDecode.io.writeData <= wb_data @[Core.scala 331:16]
    Execute.io.wb_result <= wb_data @[Core.scala 332:16]
    Execute.io.mem_wb_regWrite <= mem_reg_ctl_regWrite @[Core.scala 333:22]
    InstructionDecode.io.writeReg <= wb_addr @[Core.scala 334:15]
    InstructionDecode.io.ctl_writeEnable <= mem_reg_ctl_regWrite @[Core.scala 335:22]
    InstructionDecode.io.csr_Wb <= mem_reg_is_csr @[Core.scala 336:13]
    InstructionDecode.io.csr_Wb_data <= mem_reg_csr_data @[Core.scala 337:18]
    InstructionDecode.io.dmem_data <= io.dmemRsp.bits.dataResponse @[Core.scala 338:16]
    io.pin <= wb_data @[Core.scala 339:10]

  extmodule sram_top :
    input clk_i : UInt<1>
    input rst_i : UInt<1>
    input csb_i : UInt<1>
    input we_i : UInt<1>
    input wmask_i : UInt<4>
    input addr_i : UInt<13>
    input wdata_i : UInt<32>
    output rdata_o : UInt<32>
    defname = sram_top
    parameter IFILE_IN = "/home/hassan/nucleusrv/riscof_work/rv32i_m/privilege/src/misalign2-jalr-01.S/dut/DUT-nucleusrv.data.hex"

  module SRamTop :
    input clock : Clock
    input reset : Reset
    output io : { flip req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>}}}

    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SRamTop.scala 14:27]
    io.rsp.valid <= validReg @[SRamTop.scala 15:18]
    io.req.ready <= UInt<1>("h1") @[SRamTop.scala 16:18]
    wire rdata : UInt<32> @[SRamTop.scala 18:21]
    inst sram of sram_top @[SRamTop.scala 21:22]
    node _clk_T = asUInt(clock) @[SRamTop.scala 23:36]
    node _clk_T_1 = bits(_clk_T, 0, 0) @[SRamTop.scala 23:38]
    wire clk : UInt<1> @[SRamTop.scala 23:23]
    clk <= _clk_T_1 @[SRamTop.scala 23:23]
    wire rst : UInt<1> @[SRamTop.scala 24:19]
    node _rst_T = asUInt(reset) @[SRamTop.scala 25:24]
    rst <= _rst_T @[SRamTop.scala 25:9]
    sram.clk_i <= clk @[SRamTop.scala 27:19]
    sram.rst_i <= rst @[SRamTop.scala 28:19]
    sram.csb_i <= UInt<1>("h1") @[SRamTop.scala 29:19]
    sram.we_i is invalid @[SRamTop.scala 30:18]
    sram.wmask_i is invalid @[SRamTop.scala 31:21]
    sram.addr_i is invalid @[SRamTop.scala 32:20]
    sram.wdata_i is invalid @[SRamTop.scala 33:21]
    node _T = eq(io.req.bits.isWrite, UInt<1>("h0")) @[SRamTop.scala 40:30]
    node _T_1 = and(io.req.valid, _T) @[SRamTop.scala 40:27]
    when _T_1 : @[SRamTop.scala 40:52]
      validReg <= UInt<1>("h1") @[SRamTop.scala 43:22]
      sram.csb_i <= UInt<1>("h0") @[SRamTop.scala 44:27]
      sram.we_i <= UInt<1>("h1") @[SRamTop.scala 45:26]
      sram.addr_i <= io.req.bits.addrRequest @[SRamTop.scala 46:28]
      rdata <= sram.rdata_o @[SRamTop.scala 48:19]
    else :
      node _T_2 = and(io.req.valid, io.req.bits.isWrite) @[SRamTop.scala 49:34]
      when _T_2 : @[SRamTop.scala 49:58]
        sram.csb_i <= UInt<1>("h0") @[SRamTop.scala 54:27]
        sram.we_i <= UInt<1>("h0") @[SRamTop.scala 55:26]
        sram.wmask_i <= io.req.bits.activeByteLane @[SRamTop.scala 56:29]
        sram.addr_i <= io.req.bits.addrRequest @[SRamTop.scala 57:28]
        sram.wdata_i <= io.req.bits.dataRequest @[SRamTop.scala 58:29]
        validReg <= UInt<1>("h1") @[SRamTop.scala 59:22]
        rdata is invalid @[SRamTop.scala 60:19]
      else :
        validReg <= UInt<1>("h0") @[SRamTop.scala 62:22]
        rdata is invalid @[SRamTop.scala 64:19]
    io.rsp.bits.dataResponse <= sram.rdata_o @[SRamTop.scala 67:30]

  extmodule sram_top_1 :
    input clk_i : UInt<1>
    input rst_i : UInt<1>
    input csb_i : UInt<1>
    input we_i : UInt<1>
    input wmask_i : UInt<4>
    input addr_i : UInt<13>
    input wdata_i : UInt<32>
    output rdata_o : UInt<32>
    defname = sram_top
    parameter IFILE_IN = "/home/hassan/nucleusrv/riscof_work/rv32i_m/privilege/src/misalign2-jalr-01.S/dut/DUT-nucleusrv.program.hex"

  module SRamTop_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>}}}

    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SRamTop.scala 14:27]
    io.rsp.valid <= validReg @[SRamTop.scala 15:18]
    io.req.ready <= UInt<1>("h1") @[SRamTop.scala 16:18]
    wire rdata : UInt<32> @[SRamTop.scala 18:21]
    inst sram of sram_top_1 @[SRamTop.scala 21:22]
    node _clk_T = asUInt(clock) @[SRamTop.scala 23:36]
    node _clk_T_1 = bits(_clk_T, 0, 0) @[SRamTop.scala 23:38]
    wire clk : UInt<1> @[SRamTop.scala 23:23]
    clk <= _clk_T_1 @[SRamTop.scala 23:23]
    wire rst : UInt<1> @[SRamTop.scala 24:19]
    node _rst_T = asUInt(reset) @[SRamTop.scala 25:24]
    rst <= _rst_T @[SRamTop.scala 25:9]
    sram.clk_i <= clk @[SRamTop.scala 27:19]
    sram.rst_i <= rst @[SRamTop.scala 28:19]
    sram.csb_i <= UInt<1>("h1") @[SRamTop.scala 29:19]
    sram.we_i is invalid @[SRamTop.scala 30:18]
    sram.wmask_i is invalid @[SRamTop.scala 31:21]
    sram.addr_i is invalid @[SRamTop.scala 32:20]
    sram.wdata_i is invalid @[SRamTop.scala 33:21]
    node _T = eq(io.req.bits.isWrite, UInt<1>("h0")) @[SRamTop.scala 40:30]
    node _T_1 = and(io.req.valid, _T) @[SRamTop.scala 40:27]
    when _T_1 : @[SRamTop.scala 40:52]
      validReg <= UInt<1>("h1") @[SRamTop.scala 43:22]
      sram.csb_i <= UInt<1>("h0") @[SRamTop.scala 44:27]
      sram.we_i <= UInt<1>("h1") @[SRamTop.scala 45:26]
      sram.addr_i <= io.req.bits.addrRequest @[SRamTop.scala 46:28]
      rdata <= sram.rdata_o @[SRamTop.scala 48:19]
    else :
      node _T_2 = and(io.req.valid, io.req.bits.isWrite) @[SRamTop.scala 49:34]
      when _T_2 : @[SRamTop.scala 49:58]
        sram.csb_i <= UInt<1>("h0") @[SRamTop.scala 54:27]
        sram.we_i <= UInt<1>("h0") @[SRamTop.scala 55:26]
        sram.wmask_i <= io.req.bits.activeByteLane @[SRamTop.scala 56:29]
        sram.addr_i <= io.req.bits.addrRequest @[SRamTop.scala 57:28]
        sram.wdata_i <= io.req.bits.dataRequest @[SRamTop.scala 58:29]
        validReg <= UInt<1>("h1") @[SRamTop.scala 59:22]
        rdata is invalid @[SRamTop.scala 60:19]
      else :
        validReg <= UInt<1>("h0") @[SRamTop.scala 62:22]
        rdata is invalid @[SRamTop.scala 64:19]
    io.rsp.bits.dataResponse <= sram.rdata_o @[SRamTop.scala 67:30]

  module Top :
    input clock : Clock
    input reset : UInt<1>
    output io : { pin : UInt<32>, fcsr : UInt<32>}

    inst core of Core @[Top.scala 16:26]
    core.clock <= clock
    core.reset <= reset
    core.io.stall <= UInt<1>("h0") @[Top.scala 17:17]
    inst dmem of SRamTop @[Top.scala 19:20]
    dmem.clock <= clock
    dmem.reset <= reset
    inst imem of SRamTop_1 @[Top.scala 20:20]
    imem.clock <= clock
    imem.reset <= reset
    core.io.imemRsp <= imem.io.rsp @[Top.scala 23:19]
    imem.io.req <= core.io.imemReq @[Top.scala 24:15]
    core.io.dmemRsp <= dmem.io.rsp @[Top.scala 28:19]
    dmem.io.req <= core.io.dmemReq @[Top.scala 29:15]
    io.pin <= core.io.pin @[Top.scala 31:10]
    io.fcsr <= core.io.fcsr_o_data @[Top.scala 32:11]

